{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.calculatePoints = calculatePoints;\n  exports.updateStreak = updateStreak;\n  exports.isStreakAtRisk = isStreakAtRisk;\n  exports.calculateBadgeProgress = calculateBadgeProgress;\n  exports.calculateLeaderboardRank = calculateLeaderboardRank;\n  exports.getExpectedTime = getExpectedTime;\n  exports.formatPointsBreakdown = formatPointsBreakdown;\n  exports.getStreakEmoji = getStreakEmoji;\n  exports.getBadgeTierColor = getBadgeTierColor;\n  exports.shouldNotifyStreak = shouldNotifyStreak;\n  exports.calculateWeeklyPoints = calculateWeeklyPoints;\n  exports.calculateRetentionRate = calculateRetentionRate;\n  /**\n   * Gamification Engine for iRememberIt\n   * Based on the official GAMIFICATION_DESIGN_STRATEGY.md\n   * \n   * Implements:\n   * - Points calculation with bonuses\n   * - Badge progress tracking\n   * - Streak mechanics\n   * - Leaderboard ranking\n   * - Progress metrics\n   */\n\n  /**\n   * Calculate points for completing a stage\n   * Formula: Total Points = Base Points + First Pass Bonus + Speed Bonus + On-Time Bonus\n   */\n  function calculatePoints(completion) {\n    const {\n      stage,\n      timeSpent,\n      isFirstPass,\n      isOnTime\n    } = completion;\n\n    // Base Points = stage Ã— 50\n    const basePoints = stage * 50;\n\n    // First Pass Bonus = stage Ã— 25 (only once per stage)\n    const firstPassBonus = isFirstPass ? stage * 25 : 0;\n\n    // Speed Bonus = 50 points (if time < stage Ã— 120 seconds)\n    const expectedTime = stage * 120; // 2 minutes per stage\n    const speedBonus = timeSpent < expectedTime ? 50 : 0;\n\n    // On-Time Bonus = 100 points (if completed before due date)\n    const onTimeBonus = isOnTime ? 100 : 0;\n\n    // Calculate total\n    const totalPoints = basePoints + firstPassBonus + speedBonus + onTimeBonus;\n\n    // Create breakdown for display\n    const breakdown = [`Base: ${basePoints} pts (Stage ${stage})`];\n    if (firstPassBonus > 0) {\n      breakdown.push(`First Pass: +${firstPassBonus} pts`);\n    }\n    if (speedBonus > 0) {\n      breakdown.push(`Speed: +${speedBonus} pts (under ${Math.floor(expectedTime / 60)}m)`);\n    }\n    if (onTimeBonus > 0) {\n      breakdown.push(`On-Time: +${onTimeBonus} pts`);\n    }\n    return {\n      basePoints,\n      firstPassBonus,\n      speedBonus,\n      onTimeBonus,\n      totalPoints,\n      breakdown\n    };\n  }\n\n  /**\n   * Update streak based on practice activity\n   * Returns updated streak data and whether a badge was unlocked\n   */\n  function updateStreak(currentStreak, practiceDate = new Date()) {\n    const today = practiceDate.toISOString().split('T')[0];\n    const lastPractice = currentStreak.lastPracticeDate;\n\n    // Calculate days difference\n    const lastDate = new Date(lastPractice);\n    const todayDate = new Date(today);\n    const daysDiff = Math.floor((todayDate.getTime() - lastDate.getTime()) / (1000 * 60 * 60 * 24));\n    let newStreak = currentStreak.currentStreak;\n    let streakIncreased = false;\n    let streakBroken = false;\n    if (daysDiff === 0) {\n      // Same day, no change\n      return {\n        streakData: currentStreak,\n        streakIncreased: false,\n        streakBroken: false\n      };\n    } else if (daysDiff === 1) {\n      // Consecutive day, increase streak\n      newStreak += 1;\n      streakIncreased = true;\n    } else if (daysDiff > 1) {\n      // Streak broken, reset to 1\n      newStreak = 1;\n      streakBroken = currentStreak.currentStreak > 0;\n    }\n\n    // Update best streak if needed\n    const bestStreak = Math.max(currentStreak.bestStreak, newStreak);\n    return {\n      streakData: {\n        currentStreak: newStreak,\n        bestStreak,\n        lastPracticeDate: today,\n        streakActive: true\n      },\n      streakIncreased,\n      streakBroken\n    };\n  }\n\n  /**\n   * Check if streak is at risk (within 2 hours of breaking)\n   */\n  function isStreakAtRisk(lastPracticeDate) {\n    const lastDate = new Date(lastPracticeDate);\n    const now = new Date();\n    const hoursSinceLastPractice = (now.getTime() - lastDate.getTime()) / (1000 * 60 * 60);\n    return hoursSinceLastPractice > 22; // Within 2 hours of 24-hour deadline\n  }\n\n  /**\n   * Calculate badge progress based on user stats\n   */\n  function calculateBadgeProgress(badgeId, userStats) {\n    // Badge definitions based on the strategy document\n    const badgeDefinitions = {\n      // Skill Badges - Fill-in-the-Blank\n      'word_whisperer_bronze': {\n        category: 'skill',\n        requirement: 1,\n        metric: 'fillInBlanksCompleted'\n      },\n      'word_whisperer_silver': {\n        category: 'skill',\n        requirement: 10,\n        metric: 'fillInBlanksCompleted'\n      },\n      'word_whisperer_gold': {\n        category: 'skill',\n        requirement: 50,\n        metric: 'fillInBlanksCompleted'\n      },\n      'word_whisperer_platinum': {\n        category: 'skill',\n        requirement: 100,\n        metric: 'fillInBlanksCompleted'\n      },\n      // Skill Badges - Word Cloud\n      'cloud_master_bronze': {\n        category: 'skill',\n        requirement: 1,\n        metric: 'wordCloudsCompleted'\n      },\n      'cloud_master_silver': {\n        category: 'skill',\n        requirement: 10,\n        metric: 'wordCloudsCompleted'\n      },\n      'cloud_master_gold': {\n        category: 'skill',\n        requirement: 50,\n        metric: 'wordCloudsCompleted'\n      },\n      'cloud_master_platinum': {\n        category: 'skill',\n        requirement: 100,\n        metric: 'wordCloudsCompleted'\n      },\n      // Skill Badges - Verbal Speaking\n      'verbal_virtuoso_bronze': {\n        category: 'skill',\n        requirement: 1,\n        metric: 'verbalExercisesCompleted'\n      },\n      'verbal_virtuoso_silver': {\n        category: 'skill',\n        requirement: 10,\n        metric: 'verbalExercisesCompleted'\n      },\n      'verbal_virtuoso_gold': {\n        category: 'skill',\n        requirement: 50,\n        metric: 'verbalExercisesCompleted'\n      },\n      'verbal_virtuoso_platinum': {\n        category: 'skill',\n        requirement: 100,\n        metric: 'verbalExercisesCompleted'\n      },\n      // Streak Badges\n      'habit_hero_bronze': {\n        category: 'streak',\n        requirement: 3,\n        metric: 'currentStreak'\n      },\n      'habit_hero_silver': {\n        category: 'streak',\n        requirement: 7,\n        metric: 'currentStreak'\n      },\n      'habit_hero_gold': {\n        category: 'streak',\n        requirement: 30,\n        metric: 'currentStreak'\n      },\n      // Milestone Badges\n      'completionist_bronze': {\n        category: 'milestone',\n        requirement: 1,\n        metric: 'modulesCompleted'\n      },\n      'completionist_silver': {\n        category: 'milestone',\n        requirement: 5,\n        metric: 'modulesCompleted'\n      },\n      'completionist_gold': {\n        category: 'milestone',\n        requirement: 10,\n        metric: 'modulesCompleted'\n      },\n      'point_master_bronze': {\n        category: 'milestone',\n        requirement: 1000,\n        metric: 'totalPoints'\n      },\n      'point_master_silver': {\n        category: 'milestone',\n        requirement: 5000,\n        metric: 'totalPoints'\n      },\n      'point_master_gold': {\n        category: 'milestone',\n        requirement: 10000,\n        metric: 'totalPoints'\n      },\n      'point_master_diamond': {\n        category: 'milestone',\n        requirement: 50000,\n        metric: 'totalPoints'\n      }\n    };\n    const definition = badgeDefinitions[badgeId];\n    if (!definition) {\n      return {\n        badgeId,\n        category: 'skill',\n        progress: 0,\n        requirement: 0,\n        earned: false\n      };\n    }\n    const progress = userStats[definition.metric] || 0;\n    const earned = progress >= definition.requirement;\n    return {\n      badgeId,\n      category: definition.category,\n      progress,\n      requirement: definition.requirement,\n      earned,\n      earnedAt: earned ? new Date() : undefined\n    };\n  }\n\n  /**\n   * Calculate leaderboard ranking for a team\n   */\n  function calculateLeaderboardRank(userPoints, teamPoints) {\n    const sorted = teamPoints.sort((a, b) => b.points - a.points);\n    const rank = sorted.findIndex(entry => entry.points <= userPoints) + 1 || sorted.length + 1;\n    return {\n      rank,\n      total: sorted.length,\n      isTopTen: rank <= 10\n    };\n  }\n\n  /**\n   * Get expected time for a stage (for speed bonus calculation)\n   */\n  function getExpectedTime(stage) {\n    return stage * 120; // 2 minutes per stage\n  }\n\n  /**\n   * Format points breakdown for display\n   */\n  function formatPointsBreakdown(calculation) {\n    return calculation.breakdown.join('\\n');\n  }\n\n  /**\n   * Get streak emoji based on streak length\n   */\n  function getStreakEmoji(streak) {\n    if (streak === 0) return 'ðŸ’¤';\n    if (streak < 3) return 'ðŸ”¥';\n    if (streak < 7) return 'ðŸ”¥ðŸ”¥';\n    if (streak < 30) return 'ðŸ”¥ðŸ”¥ðŸ”¥';\n    return 'ðŸ”¥ðŸ”¥ðŸ”¥ðŸ’Ž';\n  }\n\n  /**\n   * Get badge tier color\n   */\n  function getBadgeTierColor(tier) {\n    const colors = {\n      bronze: '#CD7F32',\n      silver: '#C0C0C0',\n      gold: '#FFD700',\n      platinum: '#E5E4E2',\n      diamond: '#B9F2FF'\n    };\n    return colors[tier.toLowerCase()] || '#6366f1';\n  }\n\n  /**\n   * Check if user should receive a notification\n   */\n  function shouldNotifyStreak(streakData) {\n    if (isStreakAtRisk(streakData.lastPracticeDate)) {\n      return {\n        shouldNotify: true,\n        message: `ðŸ”¥ Don't lose your ${streakData.currentStreak} day streak! Practice now!`\n      };\n    }\n    return {\n      shouldNotify: false,\n      message: ''\n    };\n  }\n\n  /**\n   * Calculate weekly points (for leaderboard)\n   */\n  function calculateWeeklyPoints(completions, weekStartDate = new Date()) {\n    const weekStart = new Date(weekStartDate);\n    weekStart.setHours(0, 0, 0, 0);\n    weekStart.setDate(weekStart.getDate() - weekStart.getDay()); // Start of week (Sunday)\n\n    return completions.filter(completion => new Date(completion.completedAt) >= weekStart).reduce((total, completion) => {\n      const points = calculatePoints(completion);\n      return total + points.totalPoints;\n    }, 0);\n  }\n\n  /**\n   * Get retention rate for a module\n   */\n  function calculateRetentionRate(correctAnswers, totalAttempts) {\n    if (totalAttempts === 0) return 0;\n    return Math.round(correctAnswers / totalAttempts * 100);\n  }\n});","lineCount":369,"map":[[7,2,54,0,"exports"],[7,9,54,0],[7,10,54,0,"calculatePoints"],[7,25,54,0],[7,28,54,0,"calculatePoints"],[7,43,54,0],[8,2,104,0,"exports"],[8,9,104,0],[8,10,104,0,"updateStreak"],[8,22,104,0],[8,25,104,0,"updateStreak"],[8,37,104,0],[9,2,155,0,"exports"],[9,9,155,0],[9,10,155,0,"isStreakAtRisk"],[9,24,155,0],[9,27,155,0,"isStreakAtRisk"],[9,41,155,0],[10,2,166,0,"exports"],[10,9,166,0],[10,10,166,0,"calculateBadgeProgress"],[10,32,166,0],[10,35,166,0,"calculateBadgeProgress"],[10,57,166,0],[11,2,243,0,"exports"],[11,9,243,0],[11,10,243,0,"calculateLeaderboardRank"],[11,34,243,0],[11,37,243,0,"calculateLeaderboardRank"],[11,61,243,0],[12,2,260,0,"exports"],[12,9,260,0],[12,10,260,0,"getExpectedTime"],[12,25,260,0],[12,28,260,0,"getExpectedTime"],[12,43,260,0],[13,2,267,0,"exports"],[13,9,267,0],[13,10,267,0,"formatPointsBreakdown"],[13,31,267,0],[13,34,267,0,"formatPointsBreakdown"],[13,55,267,0],[14,2,274,0,"exports"],[14,9,274,0],[14,10,274,0,"getStreakEmoji"],[14,24,274,0],[14,27,274,0,"getStreakEmoji"],[14,41,274,0],[15,2,285,0,"exports"],[15,9,285,0],[15,10,285,0,"getBadgeTierColor"],[15,27,285,0],[15,30,285,0,"getBadgeTierColor"],[15,47,285,0],[16,2,299,0,"exports"],[16,9,299,0],[16,10,299,0,"shouldNotifyStreak"],[16,28,299,0],[16,31,299,0,"shouldNotifyStreak"],[16,49,299,0],[17,2,316,0,"exports"],[17,9,316,0],[17,10,316,0,"calculateWeeklyPoints"],[17,31,316,0],[17,34,316,0,"calculateWeeklyPoints"],[17,55,316,0],[18,2,335,0,"exports"],[18,9,335,0],[18,10,335,0,"calculateRetentionRate"],[18,32,335,0],[18,35,335,0,"calculateRetentionRate"],[18,57,335,0],[19,2,1,0],[20,0,2,0],[21,0,3,0],[22,0,4,0],[23,0,5,0],[24,0,6,0],[25,0,7,0],[26,0,8,0],[27,0,9,0],[28,0,10,0],[29,0,11,0],[31,2,50,0],[32,0,51,0],[33,0,52,0],[34,0,53,0],[35,2,54,7],[35,11,54,16,"calculatePoints"],[35,26,54,31,"calculatePoints"],[35,27,54,32,"completion"],[35,37,54,59],[35,39,54,80],[36,4,55,2],[36,10,55,8],[37,6,55,10,"stage"],[37,11,55,15],[38,6,55,17,"timeSpent"],[38,15,55,26],[39,6,55,28,"isFirstPass"],[39,17,55,39],[40,6,55,41,"isOnTime"],[41,4,55,50],[41,5,55,51],[41,8,55,54,"completion"],[41,18,55,64],[43,4,57,2],[44,4,58,2],[44,10,58,8,"basePoints"],[44,20,58,18],[44,23,58,21,"stage"],[44,28,58,26],[44,31,58,29],[44,33,58,31],[46,4,60,2],[47,4,61,2],[47,10,61,8,"firstPassBonus"],[47,24,61,22],[47,27,61,25,"isFirstPass"],[47,38,61,36],[47,41,61,39,"stage"],[47,46,61,44],[47,49,61,47],[47,51,61,49],[47,54,61,52],[47,55,61,53],[49,4,63,2],[50,4,64,2],[50,10,64,8,"expectedTime"],[50,22,64,20],[50,25,64,23,"stage"],[50,30,64,28],[50,33,64,31],[50,36,64,34],[50,37,64,35],[50,38,64,36],[51,4,65,2],[51,10,65,8,"speedBonus"],[51,20,65,18],[51,23,65,21,"timeSpent"],[51,32,65,30],[51,35,65,33,"expectedTime"],[51,47,65,45],[51,50,65,48],[51,52,65,50],[51,55,65,53],[51,56,65,54],[53,4,67,2],[54,4,68,2],[54,10,68,8,"onTimeBonus"],[54,21,68,19],[54,24,68,22,"isOnTime"],[54,32,68,30],[54,35,68,33],[54,38,68,36],[54,41,68,39],[54,42,68,40],[56,4,70,2],[57,4,71,2],[57,10,71,8,"totalPoints"],[57,21,71,19],[57,24,71,22,"basePoints"],[57,34,71,32],[57,37,71,35,"firstPassBonus"],[57,51,71,49],[57,54,71,52,"speedBonus"],[57,64,71,62],[57,67,71,65,"onTimeBonus"],[57,78,71,76],[59,4,73,2],[60,4,74,2],[60,10,74,8,"breakdown"],[60,19,74,27],[60,22,74,30],[60,23,75,4],[60,32,75,13,"basePoints"],[60,42,75,23],[60,57,75,38,"stage"],[60,62,75,43],[60,65,75,46],[60,66,76,3],[61,4,78,2],[61,8,78,6,"firstPassBonus"],[61,22,78,20],[61,25,78,23],[61,26,78,24],[61,28,78,26],[62,6,79,4,"breakdown"],[62,15,79,13],[62,16,79,14,"push"],[62,20,79,18],[62,21,79,19],[62,37,79,35,"firstPassBonus"],[62,51,79,49],[62,57,79,55],[62,58,79,56],[63,4,80,2],[64,4,82,2],[64,8,82,6,"speedBonus"],[64,18,82,16],[64,21,82,19],[64,22,82,20],[64,24,82,22],[65,6,83,4,"breakdown"],[65,15,83,13],[65,16,83,14,"push"],[65,20,83,18],[65,21,83,19],[65,32,83,30,"speedBonus"],[65,42,83,40],[65,57,83,55,"Math"],[65,61,83,59],[65,62,83,60,"floor"],[65,67,83,65],[65,68,83,66,"expectedTime"],[65,80,83,78],[65,83,83,81],[65,85,83,83],[65,86,83,84],[65,90,83,88],[65,91,83,89],[66,4,84,2],[67,4,86,2],[67,8,86,6,"onTimeBonus"],[67,19,86,17],[67,22,86,20],[67,23,86,21],[67,25,86,23],[68,6,87,4,"breakdown"],[68,15,87,13],[68,16,87,14,"push"],[68,20,87,18],[68,21,87,19],[68,34,87,32,"onTimeBonus"],[68,45,87,43],[68,51,87,49],[68,52,87,50],[69,4,88,2],[70,4,90,2],[70,11,90,9],[71,6,91,4,"basePoints"],[71,16,91,14],[72,6,92,4,"firstPassBonus"],[72,20,92,18],[73,6,93,4,"speedBonus"],[73,16,93,14],[74,6,94,4,"onTimeBonus"],[74,17,94,15],[75,6,95,4,"totalPoints"],[75,17,95,15],[76,6,96,4,"breakdown"],[77,4,97,2],[77,5,97,3],[78,2,98,0],[80,2,100,0],[81,0,101,0],[82,0,102,0],[83,0,103,0],[84,2,104,7],[84,11,104,16,"updateStreak"],[84,23,104,28,"updateStreak"],[84,24,105,2,"currentStreak"],[84,37,105,27],[84,39,106,2,"practiceDate"],[84,51,106,20],[84,54,106,23],[84,58,106,27,"Date"],[84,62,106,31],[84,63,106,32],[84,64,106,33],[84,66,107,79],[85,4,108,2],[85,10,108,8,"today"],[85,15,108,13],[85,18,108,16,"practiceDate"],[85,30,108,28],[85,31,108,29,"toISOString"],[85,42,108,40],[85,43,108,41],[85,44,108,42],[85,45,108,43,"split"],[85,50,108,48],[85,51,108,49],[85,54,108,52],[85,55,108,53],[85,56,108,54],[85,57,108,55],[85,58,108,56],[86,4,109,2],[86,10,109,8,"lastPractice"],[86,22,109,20],[86,25,109,23,"currentStreak"],[86,38,109,36],[86,39,109,37,"lastPracticeDate"],[86,55,109,53],[88,4,111,2],[89,4,112,2],[89,10,112,8,"lastDate"],[89,18,112,16],[89,21,112,19],[89,25,112,23,"Date"],[89,29,112,27],[89,30,112,28,"lastPractice"],[89,42,112,40],[89,43,112,41],[90,4,113,2],[90,10,113,8,"todayDate"],[90,19,113,17],[90,22,113,20],[90,26,113,24,"Date"],[90,30,113,28],[90,31,113,29,"today"],[90,36,113,34],[90,37,113,35],[91,4,114,2],[91,10,114,8,"daysDiff"],[91,18,114,16],[91,21,114,19,"Math"],[91,25,114,23],[91,26,114,24,"floor"],[91,31,114,29],[91,32,114,30],[91,33,114,31,"todayDate"],[91,42,114,40],[91,43,114,41,"getTime"],[91,50,114,48],[91,51,114,49],[91,52,114,50],[91,55,114,53,"lastDate"],[91,63,114,61],[91,64,114,62,"getTime"],[91,71,114,69],[91,72,114,70],[91,73,114,71],[91,78,114,76],[91,82,114,80],[91,85,114,83],[91,87,114,85],[91,90,114,88],[91,92,114,90],[91,95,114,93],[91,97,114,95],[91,98,114,96],[91,99,114,97],[92,4,116,2],[92,8,116,6,"newStreak"],[92,17,116,15],[92,20,116,18,"currentStreak"],[92,33,116,31],[92,34,116,32,"currentStreak"],[92,47,116,45],[93,4,117,2],[93,8,117,6,"streakIncreased"],[93,23,117,21],[93,26,117,24],[93,31,117,29],[94,4,118,2],[94,8,118,6,"streakBroken"],[94,20,118,18],[94,23,118,21],[94,28,118,26],[95,4,120,2],[95,8,120,6,"daysDiff"],[95,16,120,14],[95,21,120,19],[95,22,120,20],[95,24,120,22],[96,6,121,4],[97,6,122,4],[97,13,122,11],[98,8,123,6,"streakData"],[98,18,123,16],[98,20,123,18,"currentStreak"],[98,33,123,31],[99,8,124,6,"streakIncreased"],[99,23,124,21],[99,25,124,23],[99,30,124,28],[100,8,125,6,"streakBroken"],[100,20,125,18],[100,22,125,20],[101,6,126,4],[101,7,126,5],[102,4,127,2],[102,5,127,3],[102,11,127,9],[102,15,127,13,"daysDiff"],[102,23,127,21],[102,28,127,26],[102,29,127,27],[102,31,127,29],[103,6,128,4],[104,6,129,4,"newStreak"],[104,15,129,13],[104,19,129,17],[104,20,129,18],[105,6,130,4,"streakIncreased"],[105,21,130,19],[105,24,130,22],[105,28,130,26],[106,4,131,2],[106,5,131,3],[106,11,131,9],[106,15,131,13,"daysDiff"],[106,23,131,21],[106,26,131,24],[106,27,131,25],[106,29,131,27],[107,6,132,4],[108,6,133,4,"newStreak"],[108,15,133,13],[108,18,133,16],[108,19,133,17],[109,6,134,4,"streakBroken"],[109,18,134,16],[109,21,134,19,"currentStreak"],[109,34,134,32],[109,35,134,33,"currentStreak"],[109,48,134,46],[109,51,134,49],[109,52,134,50],[110,4,135,2],[112,4,137,2],[113,4,138,2],[113,10,138,8,"bestStreak"],[113,20,138,18],[113,23,138,21,"Math"],[113,27,138,25],[113,28,138,26,"max"],[113,31,138,29],[113,32,138,30,"currentStreak"],[113,45,138,43],[113,46,138,44,"bestStreak"],[113,56,138,54],[113,58,138,56,"newStreak"],[113,67,138,65],[113,68,138,66],[114,4,140,2],[114,11,140,9],[115,6,141,4,"streakData"],[115,16,141,14],[115,18,141,16],[116,8,142,6,"currentStreak"],[116,21,142,19],[116,23,142,21,"newStreak"],[116,32,142,30],[117,8,143,6,"bestStreak"],[117,18,143,16],[118,8,144,6,"lastPracticeDate"],[118,24,144,22],[118,26,144,24,"today"],[118,31,144,29],[119,8,145,6,"streakActive"],[119,20,145,18],[119,22,145,20],[120,6,146,4],[120,7,146,5],[121,6,147,4,"streakIncreased"],[121,21,147,19],[122,6,148,4,"streakBroken"],[123,4,149,2],[123,5,149,3],[124,2,150,0],[126,2,152,0],[127,0,153,0],[128,0,154,0],[129,2,155,7],[129,11,155,16,"isStreakAtRisk"],[129,25,155,30,"isStreakAtRisk"],[129,26,155,31,"lastPracticeDate"],[129,42,155,55],[129,44,155,66],[130,4,156,2],[130,10,156,8,"lastDate"],[130,18,156,16],[130,21,156,19],[130,25,156,23,"Date"],[130,29,156,27],[130,30,156,28,"lastPracticeDate"],[130,46,156,44],[130,47,156,45],[131,4,157,2],[131,10,157,8,"now"],[131,13,157,11],[131,16,157,14],[131,20,157,18,"Date"],[131,24,157,22],[131,25,157,23],[131,26,157,24],[132,4,158,2],[132,10,158,8,"hoursSinceLastPractice"],[132,32,158,30],[132,35,158,33],[132,36,158,34,"now"],[132,39,158,37],[132,40,158,38,"getTime"],[132,47,158,45],[132,48,158,46],[132,49,158,47],[132,52,158,50,"lastDate"],[132,60,158,58],[132,61,158,59,"getTime"],[132,68,158,66],[132,69,158,67],[132,70,158,68],[132,75,158,73],[132,79,158,77],[132,82,158,80],[132,84,158,82],[132,87,158,85],[132,89,158,87],[132,90,158,88],[133,4,160,2],[133,11,160,9,"hoursSinceLastPractice"],[133,33,160,31],[133,36,160,34],[133,38,160,36],[133,39,160,37],[133,40,160,38],[134,2,161,0],[136,2,163,0],[137,0,164,0],[138,0,165,0],[139,2,166,7],[139,11,166,16,"calculateBadgeProgress"],[139,33,166,38,"calculateBadgeProgress"],[139,34,167,2,"badgeId"],[139,41,167,17],[139,43,168,2,"userStats"],[139,52,178,3],[139,54,179,17],[140,4,180,2],[141,4,181,2],[141,10,181,8,"badgeDefinitions"],[141,26,181,115],[141,29,181,118],[142,6,182,4],[143,6,183,4],[143,29,183,27],[143,31,183,29],[144,8,183,31,"category"],[144,16,183,39],[144,18,183,41],[144,25,183,48],[145,8,183,50,"requirement"],[145,19,183,61],[145,21,183,63],[145,22,183,64],[146,8,183,66,"metric"],[146,14,183,72],[146,16,183,74],[147,6,183,98],[147,7,183,99],[148,6,184,4],[148,29,184,27],[148,31,184,29],[149,8,184,31,"category"],[149,16,184,39],[149,18,184,41],[149,25,184,48],[150,8,184,50,"requirement"],[150,19,184,61],[150,21,184,63],[150,23,184,65],[151,8,184,67,"metric"],[151,14,184,73],[151,16,184,75],[152,6,184,99],[152,7,184,100],[153,6,185,4],[153,27,185,25],[153,29,185,27],[154,8,185,29,"category"],[154,16,185,37],[154,18,185,39],[154,25,185,46],[155,8,185,48,"requirement"],[155,19,185,59],[155,21,185,61],[155,23,185,63],[156,8,185,65,"metric"],[156,14,185,71],[156,16,185,73],[157,6,185,97],[157,7,185,98],[158,6,186,4],[158,31,186,29],[158,33,186,31],[159,8,186,33,"category"],[159,16,186,41],[159,18,186,43],[159,25,186,50],[160,8,186,52,"requirement"],[160,19,186,63],[160,21,186,65],[160,24,186,68],[161,8,186,70,"metric"],[161,14,186,76],[161,16,186,78],[162,6,186,102],[162,7,186,103],[163,6,188,4],[164,6,189,4],[164,27,189,25],[164,29,189,27],[165,8,189,29,"category"],[165,16,189,37],[165,18,189,39],[165,25,189,46],[166,8,189,48,"requirement"],[166,19,189,59],[166,21,189,61],[166,22,189,62],[167,8,189,64,"metric"],[167,14,189,70],[167,16,189,72],[168,6,189,94],[168,7,189,95],[169,6,190,4],[169,27,190,25],[169,29,190,27],[170,8,190,29,"category"],[170,16,190,37],[170,18,190,39],[170,25,190,46],[171,8,190,48,"requirement"],[171,19,190,59],[171,21,190,61],[171,23,190,63],[172,8,190,65,"metric"],[172,14,190,71],[172,16,190,73],[173,6,190,95],[173,7,190,96],[174,6,191,4],[174,25,191,23],[174,27,191,25],[175,8,191,27,"category"],[175,16,191,35],[175,18,191,37],[175,25,191,44],[176,8,191,46,"requirement"],[176,19,191,57],[176,21,191,59],[176,23,191,61],[177,8,191,63,"metric"],[177,14,191,69],[177,16,191,71],[178,6,191,93],[178,7,191,94],[179,6,192,4],[179,29,192,27],[179,31,192,29],[180,8,192,31,"category"],[180,16,192,39],[180,18,192,41],[180,25,192,48],[181,8,192,50,"requirement"],[181,19,192,61],[181,21,192,63],[181,24,192,66],[182,8,192,68,"metric"],[182,14,192,74],[182,16,192,76],[183,6,192,98],[183,7,192,99],[184,6,194,4],[185,6,195,4],[185,30,195,28],[185,32,195,30],[186,8,195,32,"category"],[186,16,195,40],[186,18,195,42],[186,25,195,49],[187,8,195,51,"requirement"],[187,19,195,62],[187,21,195,64],[187,22,195,65],[188,8,195,67,"metric"],[188,14,195,73],[188,16,195,75],[189,6,195,102],[189,7,195,103],[190,6,196,4],[190,30,196,28],[190,32,196,30],[191,8,196,32,"category"],[191,16,196,40],[191,18,196,42],[191,25,196,49],[192,8,196,51,"requirement"],[192,19,196,62],[192,21,196,64],[192,23,196,66],[193,8,196,68,"metric"],[193,14,196,74],[193,16,196,76],[194,6,196,103],[194,7,196,104],[195,6,197,4],[195,28,197,26],[195,30,197,28],[196,8,197,30,"category"],[196,16,197,38],[196,18,197,40],[196,25,197,47],[197,8,197,49,"requirement"],[197,19,197,60],[197,21,197,62],[197,23,197,64],[198,8,197,66,"metric"],[198,14,197,72],[198,16,197,74],[199,6,197,101],[199,7,197,102],[200,6,198,4],[200,32,198,30],[200,34,198,32],[201,8,198,34,"category"],[201,16,198,42],[201,18,198,44],[201,25,198,51],[202,8,198,53,"requirement"],[202,19,198,64],[202,21,198,66],[202,24,198,69],[203,8,198,71,"metric"],[203,14,198,77],[203,16,198,79],[204,6,198,106],[204,7,198,107],[205,6,200,4],[206,6,201,4],[206,25,201,23],[206,27,201,25],[207,8,201,27,"category"],[207,16,201,35],[207,18,201,37],[207,26,201,45],[208,8,201,47,"requirement"],[208,19,201,58],[208,21,201,60],[208,22,201,61],[209,8,201,63,"metric"],[209,14,201,69],[209,16,201,71],[210,6,201,87],[210,7,201,88],[211,6,202,4],[211,25,202,23],[211,27,202,25],[212,8,202,27,"category"],[212,16,202,35],[212,18,202,37],[212,26,202,45],[213,8,202,47,"requirement"],[213,19,202,58],[213,21,202,60],[213,22,202,61],[214,8,202,63,"metric"],[214,14,202,69],[214,16,202,71],[215,6,202,87],[215,7,202,88],[216,6,203,4],[216,23,203,21],[216,25,203,23],[217,8,203,25,"category"],[217,16,203,33],[217,18,203,35],[217,26,203,43],[218,8,203,45,"requirement"],[218,19,203,56],[218,21,203,58],[218,23,203,60],[219,8,203,62,"metric"],[219,14,203,68],[219,16,203,70],[220,6,203,86],[220,7,203,87],[221,6,205,4],[222,6,206,4],[222,28,206,26],[222,30,206,28],[223,8,206,30,"category"],[223,16,206,38],[223,18,206,40],[223,29,206,51],[224,8,206,53,"requirement"],[224,19,206,64],[224,21,206,66],[224,22,206,67],[225,8,206,69,"metric"],[225,14,206,75],[225,16,206,77],[226,6,206,96],[226,7,206,97],[227,6,207,4],[227,28,207,26],[227,30,207,28],[228,8,207,30,"category"],[228,16,207,38],[228,18,207,40],[228,29,207,51],[229,8,207,53,"requirement"],[229,19,207,64],[229,21,207,66],[229,22,207,67],[230,8,207,69,"metric"],[230,14,207,75],[230,16,207,77],[231,6,207,96],[231,7,207,97],[232,6,208,4],[232,26,208,24],[232,28,208,26],[233,8,208,28,"category"],[233,16,208,36],[233,18,208,38],[233,29,208,49],[234,8,208,51,"requirement"],[234,19,208,62],[234,21,208,64],[234,23,208,66],[235,8,208,68,"metric"],[235,14,208,74],[235,16,208,76],[236,6,208,95],[236,7,208,96],[237,6,210,4],[237,27,210,25],[237,29,210,27],[238,8,210,29,"category"],[238,16,210,37],[238,18,210,39],[238,29,210,50],[239,8,210,52,"requirement"],[239,19,210,63],[239,21,210,65],[239,25,210,69],[240,8,210,71,"metric"],[240,14,210,77],[240,16,210,79],[241,6,210,93],[241,7,210,94],[242,6,211,4],[242,27,211,25],[242,29,211,27],[243,8,211,29,"category"],[243,16,211,37],[243,18,211,39],[243,29,211,50],[244,8,211,52,"requirement"],[244,19,211,63],[244,21,211,65],[244,25,211,69],[245,8,211,71,"metric"],[245,14,211,77],[245,16,211,79],[246,6,211,93],[246,7,211,94],[247,6,212,4],[247,25,212,23],[247,27,212,25],[248,8,212,27,"category"],[248,16,212,35],[248,18,212,37],[248,29,212,48],[249,8,212,50,"requirement"],[249,19,212,61],[249,21,212,63],[249,26,212,68],[250,8,212,70,"metric"],[250,14,212,76],[250,16,212,78],[251,6,212,92],[251,7,212,93],[252,6,213,4],[252,28,213,26],[252,30,213,28],[253,8,213,30,"category"],[253,16,213,38],[253,18,213,40],[253,29,213,51],[254,8,213,53,"requirement"],[254,19,213,64],[254,21,213,66],[254,26,213,71],[255,8,213,73,"metric"],[255,14,213,79],[255,16,213,81],[256,6,213,95],[257,4,214,2],[257,5,214,3],[258,4,216,2],[258,10,216,8,"definition"],[258,20,216,18],[258,23,216,21,"badgeDefinitions"],[258,39,216,37],[258,40,216,38,"badgeId"],[258,47,216,45],[258,48,216,46],[259,4,217,2],[259,8,217,6],[259,9,217,7,"definition"],[259,19,217,17],[259,21,217,19],[260,6,218,4],[260,13,218,11],[261,8,219,6,"badgeId"],[261,15,219,13],[262,8,220,6,"category"],[262,16,220,14],[262,18,220,16],[262,25,220,23],[263,8,221,6,"progress"],[263,16,221,14],[263,18,221,16],[263,19,221,17],[264,8,222,6,"requirement"],[264,19,222,17],[264,21,222,19],[264,22,222,20],[265,8,223,6,"earned"],[265,14,223,12],[265,16,223,14],[266,6,224,4],[266,7,224,5],[267,4,225,2],[268,4,227,2],[268,10,227,8,"progress"],[268,18,227,16],[268,21,227,19,"userStats"],[268,30,227,28],[268,31,227,29,"definition"],[268,41,227,39],[268,42,227,40,"metric"],[268,48,227,46],[268,49,227,47],[268,53,227,61],[268,54,227,62],[269,4,228,2],[269,10,228,8,"earned"],[269,16,228,14],[269,19,228,17,"progress"],[269,27,228,25],[269,31,228,29,"definition"],[269,41,228,39],[269,42,228,40,"requirement"],[269,53,228,51],[270,4,230,2],[270,11,230,9],[271,6,231,4,"badgeId"],[271,13,231,11],[272,6,232,4,"category"],[272,14,232,12],[272,16,232,14,"definition"],[272,26,232,24],[272,27,232,25,"category"],[272,35,232,40],[273,6,233,4,"progress"],[273,14,233,12],[274,6,234,4,"requirement"],[274,17,234,15],[274,19,234,17,"definition"],[274,29,234,27],[274,30,234,28,"requirement"],[274,41,234,39],[275,6,235,4,"earned"],[275,12,235,10],[276,6,236,4,"earnedAt"],[276,14,236,12],[276,16,236,14,"earned"],[276,22,236,20],[276,25,236,23],[276,29,236,27,"Date"],[276,33,236,31],[276,34,236,32],[276,35,236,33],[276,38,236,36,"undefined"],[277,4,237,2],[277,5,237,3],[278,2,238,0],[280,2,240,0],[281,0,241,0],[282,0,242,0],[283,2,243,7],[283,11,243,16,"calculateLeaderboardRank"],[283,35,243,40,"calculateLeaderboardRank"],[283,36,244,2,"userPoints"],[283,46,244,20],[283,48,245,2,"teamPoints"],[283,58,245,50],[283,60,246,54],[284,4,247,2],[284,10,247,8,"sorted"],[284,16,247,14],[284,19,247,17,"teamPoints"],[284,29,247,27],[284,30,247,28,"sort"],[284,34,247,32],[284,35,247,33],[284,36,247,34,"a"],[284,37,247,35],[284,39,247,37,"b"],[284,40,247,38],[284,45,247,43,"b"],[284,46,247,44],[284,47,247,45,"points"],[284,53,247,51],[284,56,247,54,"a"],[284,57,247,55],[284,58,247,56,"points"],[284,64,247,62],[284,65,247,63],[285,4,248,2],[285,10,248,8,"rank"],[285,14,248,12],[285,17,248,15,"sorted"],[285,23,248,21],[285,24,248,22,"findIndex"],[285,33,248,31],[285,34,248,32,"entry"],[285,39,248,37],[285,43,248,41,"entry"],[285,48,248,46],[285,49,248,47,"points"],[285,55,248,53],[285,59,248,57,"userPoints"],[285,69,248,67],[285,70,248,68],[285,73,248,71],[285,74,248,72],[285,78,248,76,"sorted"],[285,84,248,82],[285,85,248,83,"length"],[285,91,248,89],[285,94,248,92],[285,95,248,93],[286,4,250,2],[286,11,250,9],[287,6,251,4,"rank"],[287,10,251,8],[288,6,252,4,"total"],[288,11,252,9],[288,13,252,11,"sorted"],[288,19,252,17],[288,20,252,18,"length"],[288,26,252,24],[289,6,253,4,"isTopTen"],[289,14,253,12],[289,16,253,14,"rank"],[289,20,253,18],[289,24,253,22],[290,4,254,2],[290,5,254,3],[291,2,255,0],[293,2,257,0],[294,0,258,0],[295,0,259,0],[296,2,260,7],[296,11,260,16,"getExpectedTime"],[296,26,260,31,"getExpectedTime"],[296,27,260,32,"stage"],[296,32,260,45],[296,34,260,55],[297,4,261,2],[297,11,261,9,"stage"],[297,16,261,14],[297,19,261,17],[297,22,261,20],[297,23,261,21],[297,24,261,22],[298,2,262,0],[300,2,264,0],[301,0,265,0],[302,0,266,0],[303,2,267,7],[303,11,267,16,"formatPointsBreakdown"],[303,32,267,37,"formatPointsBreakdown"],[303,33,267,38,"calculation"],[303,44,267,68],[303,46,267,78],[304,4,268,2],[304,11,268,9,"calculation"],[304,22,268,20],[304,23,268,21,"breakdown"],[304,32,268,30],[304,33,268,31,"join"],[304,37,268,35],[304,38,268,36],[304,42,268,40],[304,43,268,41],[305,2,269,0],[307,2,271,0],[308,0,272,0],[309,0,273,0],[310,2,274,7],[310,11,274,16,"getStreakEmoji"],[310,25,274,30,"getStreakEmoji"],[310,26,274,31,"streak"],[310,32,274,45],[310,34,274,55],[311,4,275,2],[311,8,275,6,"streak"],[311,14,275,12],[311,19,275,17],[311,20,275,18],[311,22,275,20],[311,29,275,27],[311,33,275,31],[312,4,276,2],[312,8,276,6,"streak"],[312,14,276,12],[312,17,276,15],[312,18,276,16],[312,20,276,18],[312,27,276,25],[312,31,276,29],[313,4,277,2],[313,8,277,6,"streak"],[313,14,277,12],[313,17,277,15],[313,18,277,16],[313,20,277,18],[313,27,277,25],[313,33,277,31],[314,4,278,2],[314,8,278,6,"streak"],[314,14,278,12],[314,17,278,15],[314,19,278,17],[314,21,278,19],[314,28,278,26],[314,36,278,34],[315,4,279,2],[315,11,279,9],[315,21,279,19],[316,2,280,0],[318,2,282,0],[319,0,283,0],[320,0,284,0],[321,2,285,7],[321,11,285,16,"getBadgeTierColor"],[321,28,285,33,"getBadgeTierColor"],[321,29,285,34,"tier"],[321,33,285,46],[321,35,285,56],[322,4,286,2],[322,10,286,8,"colors"],[322,16,286,38],[322,19,286,41],[323,6,287,4,"bronze"],[323,12,287,10],[323,14,287,12],[323,23,287,21],[324,6,288,4,"silver"],[324,12,288,10],[324,14,288,12],[324,23,288,21],[325,6,289,4,"gold"],[325,10,289,8],[325,12,289,10],[325,21,289,19],[326,6,290,4,"platinum"],[326,14,290,12],[326,16,290,14],[326,25,290,23],[327,6,291,4,"diamond"],[327,13,291,11],[327,15,291,13],[328,4,292,2],[328,5,292,3],[329,4,293,2],[329,11,293,9,"colors"],[329,17,293,15],[329,18,293,16,"tier"],[329,22,293,20],[329,23,293,21,"toLowerCase"],[329,34,293,32],[329,35,293,33],[329,36,293,34],[329,37,293,35],[329,41,293,39],[329,50,293,48],[330,2,294,0],[332,2,296,0],[333,0,297,0],[334,0,298,0],[335,2,299,7],[335,11,299,16,"shouldNotifyStreak"],[335,29,299,34,"shouldNotifyStreak"],[335,30,299,35,"streakData"],[335,40,299,57],[335,42,302,2],[336,4,303,2],[336,8,303,6,"isStreakAtRisk"],[336,22,303,20],[336,23,303,21,"streakData"],[336,33,303,31],[336,34,303,32,"lastPracticeDate"],[336,50,303,48],[336,51,303,49],[336,53,303,51],[337,6,304,4],[337,13,304,11],[338,8,305,6,"shouldNotify"],[338,20,305,18],[338,22,305,20],[338,26,305,24],[339,8,306,6,"message"],[339,15,306,13],[339,17,306,15],[339,39,306,37,"streakData"],[339,49,306,47],[339,50,306,48,"currentStreak"],[339,63,306,61],[340,6,307,4],[340,7,307,5],[341,4,308,2],[342,4,310,2],[342,11,310,9],[343,6,310,11,"shouldNotify"],[343,18,310,23],[343,20,310,25],[343,25,310,30],[344,6,310,32,"message"],[344,13,310,39],[344,15,310,41],[345,4,310,44],[345,5,310,45],[346,2,311,0],[348,2,313,0],[349,0,314,0],[350,0,315,0],[351,2,316,7],[351,11,316,16,"calculateWeeklyPoints"],[351,32,316,37,"calculateWeeklyPoints"],[351,33,317,2,"completions"],[351,44,317,32],[351,46,318,2,"weekStartDate"],[351,59,318,21],[351,62,318,24],[351,66,318,28,"Date"],[351,70,318,32],[351,71,318,33],[351,72,318,34],[351,74,319,10],[352,4,320,2],[352,10,320,8,"weekStart"],[352,19,320,17],[352,22,320,20],[352,26,320,24,"Date"],[352,30,320,28],[352,31,320,29,"weekStartDate"],[352,44,320,42],[352,45,320,43],[353,4,321,2,"weekStart"],[353,13,321,11],[353,14,321,12,"setHours"],[353,22,321,20],[353,23,321,21],[353,24,321,22],[353,26,321,24],[353,27,321,25],[353,29,321,27],[353,30,321,28],[353,32,321,30],[353,33,321,31],[353,34,321,32],[354,4,322,2,"weekStart"],[354,13,322,11],[354,14,322,12,"setDate"],[354,21,322,19],[354,22,322,20,"weekStart"],[354,31,322,29],[354,32,322,30,"getDate"],[354,39,322,37],[354,40,322,38],[354,41,322,39],[354,44,322,42,"weekStart"],[354,53,322,51],[354,54,322,52,"getDay"],[354,60,322,58],[354,61,322,59],[354,62,322,60],[354,63,322,61],[354,64,322,62],[354,65,322,63],[356,4,324,2],[356,11,324,9,"completions"],[356,22,324,20],[356,23,325,5,"filter"],[356,29,325,11],[356,30,325,12,"completion"],[356,40,325,22],[356,44,325,26],[356,48,325,30,"Date"],[356,52,325,34],[356,53,325,35,"completion"],[356,63,325,45],[356,64,325,46,"completedAt"],[356,75,325,57],[356,76,325,58],[356,80,325,62,"weekStart"],[356,89,325,71],[356,90,325,72],[356,91,326,5,"reduce"],[356,97,326,11],[356,98,326,12],[356,99,326,13,"total"],[356,104,326,18],[356,106,326,20,"completion"],[356,116,326,30],[356,121,326,35],[357,6,327,6],[357,12,327,12,"points"],[357,18,327,18],[357,21,327,21,"calculatePoints"],[357,36,327,36],[357,37,327,37,"completion"],[357,47,327,47],[357,48,327,48],[358,6,328,6],[358,13,328,13,"total"],[358,18,328,18],[358,21,328,21,"points"],[358,27,328,27],[358,28,328,28,"totalPoints"],[358,39,328,39],[359,4,329,4],[359,5,329,5],[359,7,329,7],[359,8,329,8],[359,9,329,9],[360,2,330,0],[362,2,332,0],[363,0,333,0],[364,0,334,0],[365,2,335,7],[365,11,335,16,"calculateRetentionRate"],[365,33,335,38,"calculateRetentionRate"],[365,34,336,2,"correctAnswers"],[365,48,336,24],[365,50,337,2,"totalAttempts"],[365,63,337,23],[365,65,338,10],[366,4,339,2],[366,8,339,6,"totalAttempts"],[366,21,339,19],[366,26,339,24],[366,27,339,25],[366,29,339,27],[366,36,339,34],[366,37,339,35],[367,4,340,2],[367,11,340,9,"Math"],[367,15,340,13],[367,16,340,14,"round"],[367,21,340,19],[367,22,340,21,"correctAnswers"],[367,36,340,35],[367,39,340,38,"totalAttempts"],[367,52,340,51],[367,55,340,55],[367,58,340,58],[367,59,340,59],[368,2,341,0],[369,0,341,1],[369,3]],"functionMap":{"names":["<global>","calculatePoints","updateStreak","isStreakAtRisk","calculateBadgeProgress","calculateLeaderboardRank","teamPoints.sort$argument_0","sorted.findIndex$argument_0","getExpectedTime","formatPointsBreakdown","getStreakEmoji","getBadgeTierColor","shouldNotifyStreak","calculateWeeklyPoints","completions.filter$argument_0","completions.filter.reduce$argument_0","calculateRetentionRate"],"mappings":"AAA;OCqD;CD4C;OEM;CF8C;OGK;CHM;OIK;CJwE;OKK;iCCI,6BD;gCEC,mCF;CLO;OQK;CRE;OSK;CTE;OUK;CVM;OWK;CXS;OYK;CZY;OaK;YCS,2DD;YEC;KFG;CbC;OgBK;ChBM"},"hasCjsExports":false},"type":"js/module"}]}