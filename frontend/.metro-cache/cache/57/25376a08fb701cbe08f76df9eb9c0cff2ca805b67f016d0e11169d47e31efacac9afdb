{"dependencies":[{"name":"./thenable.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":20},"end":{"line":2,"column":47,"index":67}}],"key":"kKA5IQ5mf6XoWFagMsmQasyMyhE=","exportNames":["*"],"imports":1}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":34,"index":102}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateMutation\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateMutation;\n    }\n  });\n  Object.defineProperty(exports, \"defaultShouldDehydrateQuery\", {\n    enumerable: true,\n    get: function () {\n      return defaultShouldDehydrateQuery;\n    }\n  });\n  Object.defineProperty(exports, \"dehydrate\", {\n    enumerable: true,\n    get: function () {\n      return dehydrate;\n    }\n  });\n  Object.defineProperty(exports, \"hydrate\", {\n    enumerable: true,\n    get: function () {\n      return hydrate;\n    }\n  });\n  var _thenableJs = require(_dependencyMap[0], \"./thenable.js\");\n  var _utilsJs = require(_dependencyMap[1], \"./utils.js\");\n  // src/hydration.ts\n\n  function defaultTransformerFn(data) {\n    return data;\n  }\n  function dehydrateMutation(mutation) {\n    return {\n      mutationKey: mutation.options.mutationKey,\n      state: mutation.state,\n      ...(mutation.options.scope && {\n        scope: mutation.options.scope\n      }),\n      ...(mutation.meta && {\n        meta: mutation.meta\n      })\n    };\n  }\n  function dehydrateQuery(query, serializeData, shouldRedactErrors) {\n    const promise = query.promise?.then(serializeData).catch(error => {\n      if (!shouldRedactErrors(error)) {\n        return Promise.reject(error);\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        console.error(`A query that was dehydrated as pending ended up rejecting. [${query.queryHash}]: ${error}; The error will be redacted in production builds`);\n      }\n      return Promise.reject(new Error(\"redacted\"));\n    });\n    promise?.catch(_utilsJs.noop);\n    return {\n      dehydratedAt: Date.now(),\n      state: {\n        ...query.state,\n        ...(query.state.data !== void 0 && {\n          data: serializeData(query.state.data)\n        })\n      },\n      queryKey: query.queryKey,\n      queryHash: query.queryHash,\n      ...(query.state.status === \"pending\" && {\n        promise\n      }),\n      ...(query.meta && {\n        meta: query.meta\n      })\n    };\n  }\n  function defaultShouldDehydrateMutation(mutation) {\n    return mutation.state.isPaused;\n  }\n  function defaultShouldDehydrateQuery(query) {\n    return query.state.status === \"success\";\n  }\n  function defaultShouldRedactErrors(_) {\n    return true;\n  }\n  function dehydrate(client, options = {}) {\n    const filterMutation = options.shouldDehydrateMutation ?? client.getDefaultOptions().dehydrate?.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n    const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n    const filterQuery = options.shouldDehydrateQuery ?? client.getDefaultOptions().dehydrate?.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n    const shouldRedactErrors = options.shouldRedactErrors ?? client.getDefaultOptions().dehydrate?.shouldRedactErrors ?? defaultShouldRedactErrors;\n    const serializeData = options.serializeData ?? client.getDefaultOptions().dehydrate?.serializeData ?? defaultTransformerFn;\n    const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query, serializeData, shouldRedactErrors)] : []);\n    return {\n      mutations,\n      queries\n    };\n  }\n  function hydrate(client, dehydratedState, options) {\n    if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n      return;\n    }\n    const mutationCache = client.getMutationCache();\n    const queryCache = client.getQueryCache();\n    const deserializeData = options?.defaultOptions?.deserializeData ?? client.getDefaultOptions().hydrate?.deserializeData ?? defaultTransformerFn;\n    const mutations = dehydratedState.mutations || [];\n    const queries = dehydratedState.queries || [];\n    mutations.forEach(({\n      state,\n      ...mutationOptions\n    }) => {\n      mutationCache.build(client, {\n        ...client.getDefaultOptions().hydrate?.mutations,\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions\n      }, state);\n    });\n    queries.forEach(({\n      queryKey,\n      state,\n      queryHash,\n      meta,\n      promise,\n      dehydratedAt\n    }) => {\n      const syncData = promise ? (0, _thenableJs.tryResolveSync)(promise) : void 0;\n      const rawData = state.data === void 0 ? syncData?.data : state.data;\n      const data = rawData === void 0 ? rawData : deserializeData(rawData);\n      let query = queryCache.get(queryHash);\n      const existingQueryIsPending = query?.state.status === \"pending\";\n      const existingQueryIsFetching = query?.state.fetchStatus === \"fetching\";\n      if (query) {\n        const hasNewerSyncData = syncData &&\n        // We only need this undefined check to handle older dehydration\n        // payloads that might not have dehydratedAt\n        dehydratedAt !== void 0 && dehydratedAt > query.state.dataUpdatedAt;\n        if (state.dataUpdatedAt > query.state.dataUpdatedAt || hasNewerSyncData) {\n          const {\n            fetchStatus: _ignored,\n            ...serializedState\n          } = state;\n          query.setState({\n            ...serializedState,\n            data\n          });\n        }\n      } else {\n        query = queryCache.build(client, {\n          ...client.getDefaultOptions().hydrate?.queries,\n          ...options?.defaultOptions?.queries,\n          queryKey,\n          queryHash,\n          meta\n        },\n        // Reset fetch status to idle to avoid\n        // query being stuck in fetching state upon hydration\n        {\n          ...state,\n          data,\n          fetchStatus: \"idle\",\n          status: data !== void 0 ? \"success\" : state.status\n        });\n      }\n      if (promise && !existingQueryIsPending && !existingQueryIsFetching && (\n      // Only hydrate if dehydration is newer than any existing data,\n      // this is always true for new queries\n      dehydratedAt === void 0 || dehydratedAt > query.state.dataUpdatedAt)) {\n        query.fetch(void 0, {\n          // RSC transformed promises are not thenable\n          initialPromise: Promise.resolve(promise).then(deserializeData)\n        }).catch(_utilsJs.noop);\n      }\n    });\n  }\n});","lineCount":176,"map":[[7,2,136,0,"Object"],[7,8,136,0],[7,9,136,0,"defineProperty"],[7,23,136,0],[7,24,136,0,"exports"],[7,31,136,0],[8,4,136,0,"enumerable"],[8,14,136,0],[9,4,136,0,"get"],[9,7,136,0],[9,18,136,0,"get"],[9,19,136,0],[10,6,136,0],[10,13,137,2,"defaultShouldDehydrateMutation"],[10,43,137,32],[11,4,137,32],[12,2,137,32],[13,2,136,0,"Object"],[13,8,136,0],[13,9,136,0,"defineProperty"],[13,23,136,0],[13,24,136,0,"exports"],[13,31,136,0],[14,4,136,0,"enumerable"],[14,14,136,0],[15,4,136,0,"get"],[15,7,136,0],[15,18,136,0,"get"],[15,19,136,0],[16,6,136,0],[16,13,138,2,"defaultShouldDehydrateQuery"],[16,40,138,29],[17,4,138,29],[18,2,138,29],[19,2,136,0,"Object"],[19,8,136,0],[19,9,136,0,"defineProperty"],[19,23,136,0],[19,24,136,0,"exports"],[19,31,136,0],[20,4,136,0,"enumerable"],[20,14,136,0],[21,4,136,0,"get"],[21,7,136,0],[21,18,136,0,"get"],[21,19,136,0],[22,6,136,0],[22,13,139,2,"dehydrate"],[22,22,139,11],[23,4,139,11],[24,2,139,11],[25,2,136,0,"Object"],[25,8,136,0],[25,9,136,0,"defineProperty"],[25,23,136,0],[25,24,136,0,"exports"],[25,31,136,0],[26,4,136,0,"enumerable"],[26,14,136,0],[27,4,136,0,"get"],[27,7,136,0],[27,18,136,0,"get"],[27,19,136,0],[28,6,136,0],[28,13,140,2,"hydrate"],[28,20,140,9],[29,4,140,9],[30,2,140,9],[31,2,2,0],[31,6,2,0,"_thenableJs"],[31,17,2,0],[31,20,2,0,"require"],[31,27,2,0],[31,28,2,0,"_dependencyMap"],[31,42,2,0],[32,2,3,0],[32,6,3,0,"_utilsJs"],[32,14,3,0],[32,17,3,0,"require"],[32,24,3,0],[32,25,3,0,"_dependencyMap"],[32,39,3,0],[33,2,1,0],[35,2,4,0],[35,11,4,9,"defaultTransformerFn"],[35,31,4,29,"defaultTransformerFn"],[35,32,4,30,"data"],[35,36,4,34],[35,38,4,36],[36,4,5,2],[36,11,5,9,"data"],[36,15,5,13],[37,2,6,0],[38,2,7,0],[38,11,7,9,"dehydrateMutation"],[38,28,7,26,"dehydrateMutation"],[38,29,7,27,"mutation"],[38,37,7,35],[38,39,7,37],[39,4,8,2],[39,11,8,9],[40,6,9,4,"mutationKey"],[40,17,9,15],[40,19,9,17,"mutation"],[40,27,9,25],[40,28,9,26,"options"],[40,35,9,33],[40,36,9,34,"mutationKey"],[40,47,9,45],[41,6,10,4,"state"],[41,11,10,9],[41,13,10,11,"mutation"],[41,21,10,19],[41,22,10,20,"state"],[41,27,10,25],[42,6,11,4],[42,10,11,7,"mutation"],[42,18,11,15],[42,19,11,16,"options"],[42,26,11,23],[42,27,11,24,"scope"],[42,32,11,29],[42,36,11,33],[43,8,11,35,"scope"],[43,13,11,40],[43,15,11,42,"mutation"],[43,23,11,50],[43,24,11,51,"options"],[43,31,11,58],[43,32,11,59,"scope"],[44,6,11,65],[44,7,11,66],[45,6,12,4],[45,10,12,7,"mutation"],[45,18,12,15],[45,19,12,16,"meta"],[45,23,12,20],[45,27,12,24],[46,8,12,26,"meta"],[46,12,12,30],[46,14,12,32,"mutation"],[46,22,12,40],[46,23,12,41,"meta"],[47,6,12,46],[47,7,12,47],[48,4,13,2],[48,5,13,3],[49,2,14,0],[50,2,15,0],[50,11,15,9,"dehydrateQuery"],[50,25,15,23,"dehydrateQuery"],[50,26,15,24,"query"],[50,31,15,29],[50,33,15,31,"serializeData"],[50,46,15,44],[50,48,15,46,"shouldRedactErrors"],[50,66,15,64],[50,68,15,66],[51,4,16,2],[51,10,16,8,"promise"],[51,17,16,15],[51,20,16,18,"query"],[51,25,16,23],[51,26,16,24,"promise"],[51,33,16,31],[51,35,16,33,"then"],[51,39,16,37],[51,40,16,38,"serializeData"],[51,53,16,51],[51,54,16,52],[51,55,16,53,"catch"],[51,60,16,58],[51,61,16,60,"error"],[51,66,16,65],[51,70,16,70],[52,6,17,4],[52,10,17,8],[52,11,17,9,"shouldRedactErrors"],[52,29,17,27],[52,30,17,28,"error"],[52,35,17,33],[52,36,17,34],[52,38,17,36],[53,8,18,6],[53,15,18,13,"Promise"],[53,22,18,20],[53,23,18,21,"reject"],[53,29,18,27],[53,30,18,28,"error"],[53,35,18,33],[53,36,18,34],[54,6,19,4],[55,6,20,4],[55,10,20,8,"process"],[55,17,20,15],[55,18,20,16,"env"],[55,21,20,19],[55,22,20,20,"NODE_ENV"],[55,30,20,28],[55,35,20,33],[55,47,20,45],[55,49,20,47],[56,8,21,6,"console"],[56,15,21,13],[56,16,21,14,"error"],[56,21,21,19],[56,22,22,8],[56,85,22,71,"query"],[56,90,22,76],[56,91,22,77,"queryHash"],[56,100,22,86],[56,106,22,92,"error"],[56,111,22,97],[56,162,23,6],[56,163,23,7],[57,6,24,4],[58,6,25,4],[58,13,25,11,"Promise"],[58,20,25,18],[58,21,25,19,"reject"],[58,27,25,25],[58,28,25,26],[58,32,25,30,"Error"],[58,37,25,35],[58,38,25,36],[58,48,25,46],[58,49,25,47],[58,50,25,48],[59,4,26,2],[59,5,26,3],[59,6,26,4],[60,4,27,2,"promise"],[60,11,27,9],[60,13,27,11,"catch"],[60,18,27,16],[60,19,27,17,"noop"],[60,27,27,21],[60,28,27,21,"noop"],[60,32,27,21],[60,33,27,22],[61,4,28,2],[61,11,28,9],[62,6,29,4,"dehydratedAt"],[62,18,29,16],[62,20,29,18,"Date"],[62,24,29,22],[62,25,29,23,"now"],[62,28,29,26],[62,29,29,27],[62,30,29,28],[63,6,30,4,"state"],[63,11,30,9],[63,13,30,11],[64,8,31,6],[64,11,31,9,"query"],[64,16,31,14],[64,17,31,15,"state"],[64,22,31,20],[65,8,32,6],[65,12,32,9,"query"],[65,17,32,14],[65,18,32,15,"state"],[65,23,32,20],[65,24,32,21,"data"],[65,28,32,25],[65,33,32,30],[65,38,32,35],[65,39,32,36],[65,43,32,40],[66,10,33,8,"data"],[66,14,33,12],[66,16,33,14,"serializeData"],[66,29,33,27],[66,30,33,28,"query"],[66,35,33,33],[66,36,33,34,"state"],[66,41,33,39],[66,42,33,40,"data"],[66,46,33,44],[67,8,34,6],[67,9,34,7],[68,6,35,4],[68,7,35,5],[69,6,36,4,"queryKey"],[69,14,36,12],[69,16,36,14,"query"],[69,21,36,19],[69,22,36,20,"queryKey"],[69,30,36,28],[70,6,37,4,"queryHash"],[70,15,37,13],[70,17,37,15,"query"],[70,22,37,20],[70,23,37,21,"queryHash"],[70,32,37,30],[71,6,38,4],[71,10,38,7,"query"],[71,15,38,12],[71,16,38,13,"state"],[71,21,38,18],[71,22,38,19,"status"],[71,28,38,25],[71,33,38,30],[71,42,38,39],[71,46,38,43],[72,8,39,6,"promise"],[73,6,40,4],[73,7,40,5],[74,6,41,4],[74,10,41,7,"query"],[74,15,41,12],[74,16,41,13,"meta"],[74,20,41,17],[74,24,41,21],[75,8,41,23,"meta"],[75,12,41,27],[75,14,41,29,"query"],[75,19,41,34],[75,20,41,35,"meta"],[76,6,41,40],[76,7,41,41],[77,4,42,2],[77,5,42,3],[78,2,43,0],[79,2,44,0],[79,11,44,9,"defaultShouldDehydrateMutation"],[79,41,44,39,"defaultShouldDehydrateMutation"],[79,42,44,40,"mutation"],[79,50,44,48],[79,52,44,50],[80,4,45,2],[80,11,45,9,"mutation"],[80,19,45,17],[80,20,45,18,"state"],[80,25,45,23],[80,26,45,24,"isPaused"],[80,34,45,32],[81,2,46,0],[82,2,47,0],[82,11,47,9,"defaultShouldDehydrateQuery"],[82,38,47,36,"defaultShouldDehydrateQuery"],[82,39,47,37,"query"],[82,44,47,42],[82,46,47,44],[83,4,48,2],[83,11,48,9,"query"],[83,16,48,14],[83,17,48,15,"state"],[83,22,48,20],[83,23,48,21,"status"],[83,29,48,27],[83,34,48,32],[83,43,48,41],[84,2,49,0],[85,2,50,0],[85,11,50,9,"defaultShouldRedactErrors"],[85,36,50,34,"defaultShouldRedactErrors"],[85,37,50,35,"_"],[85,38,50,36],[85,40,50,38],[86,4,51,2],[86,11,51,9],[86,15,51,13],[87,2,52,0],[88,2,53,0],[88,11,53,9,"dehydrate"],[88,20,53,18,"dehydrate"],[88,21,53,19,"client"],[88,27,53,25],[88,29,53,27,"options"],[88,36,53,34],[88,39,53,37],[88,40,53,38],[88,41,53,39],[88,43,53,41],[89,4,54,2],[89,10,54,8,"filterMutation"],[89,24,54,22],[89,27,54,25,"options"],[89,34,54,32],[89,35,54,33,"shouldDehydrateMutation"],[89,58,54,56],[89,62,54,60,"client"],[89,68,54,66],[89,69,54,67,"getDefaultOptions"],[89,86,54,84],[89,87,54,85],[89,88,54,86],[89,89,54,87,"dehydrate"],[89,98,54,96],[89,100,54,98,"shouldDehydrateMutation"],[89,123,54,121],[89,127,54,125,"defaultShouldDehydrateMutation"],[89,157,54,155],[90,4,55,2],[90,10,55,8,"mutations"],[90,19,55,17],[90,22,55,20,"client"],[90,28,55,26],[90,29,55,27,"getMutationCache"],[90,45,55,43],[90,46,55,44],[90,47,55,45],[90,48,55,46,"getAll"],[90,54,55,52],[90,55,55,53],[90,56,55,54],[90,57,55,55,"flatMap"],[90,64,55,62],[90,65,56,5,"mutation"],[90,73,56,13],[90,77,56,18,"filterMutation"],[90,91,56,32],[90,92,56,33,"mutation"],[90,100,56,41],[90,101,56,42],[90,104,56,45],[90,105,56,46,"dehydrateMutation"],[90,122,56,63],[90,123,56,64,"mutation"],[90,131,56,72],[90,132,56,73],[90,133,56,74],[90,136,56,77],[90,138,57,2],[90,139,57,3],[91,4,58,2],[91,10,58,8,"filterQuery"],[91,21,58,19],[91,24,58,22,"options"],[91,31,58,29],[91,32,58,30,"shouldDehydrateQuery"],[91,52,58,50],[91,56,58,54,"client"],[91,62,58,60],[91,63,58,61,"getDefaultOptions"],[91,80,58,78],[91,81,58,79],[91,82,58,80],[91,83,58,81,"dehydrate"],[91,92,58,90],[91,94,58,92,"shouldDehydrateQuery"],[91,114,58,112],[91,118,58,116,"defaultShouldDehydrateQuery"],[91,145,58,143],[92,4,59,2],[92,10,59,8,"shouldRedactErrors"],[92,28,59,26],[92,31,59,29,"options"],[92,38,59,36],[92,39,59,37,"shouldRedactErrors"],[92,57,59,55],[92,61,59,59,"client"],[92,67,59,65],[92,68,59,66,"getDefaultOptions"],[92,85,59,83],[92,86,59,84],[92,87,59,85],[92,88,59,86,"dehydrate"],[92,97,59,95],[92,99,59,97,"shouldRedactErrors"],[92,117,59,115],[92,121,59,119,"defaultShouldRedactErrors"],[92,146,59,144],[93,4,60,2],[93,10,60,8,"serializeData"],[93,23,60,21],[93,26,60,24,"options"],[93,33,60,31],[93,34,60,32,"serializeData"],[93,47,60,45],[93,51,60,49,"client"],[93,57,60,55],[93,58,60,56,"getDefaultOptions"],[93,75,60,73],[93,76,60,74],[93,77,60,75],[93,78,60,76,"dehydrate"],[93,87,60,85],[93,89,60,87,"serializeData"],[93,102,60,100],[93,106,60,104,"defaultTransformerFn"],[93,126,60,124],[94,4,61,2],[94,10,61,8,"queries"],[94,17,61,15],[94,20,61,18,"client"],[94,26,61,24],[94,27,61,25,"getQueryCache"],[94,40,61,38],[94,41,61,39],[94,42,61,40],[94,43,61,41,"getAll"],[94,49,61,47],[94,50,61,48],[94,51,61,49],[94,52,61,50,"flatMap"],[94,59,61,57],[94,60,62,5,"query"],[94,65,62,10],[94,69,62,15,"filterQuery"],[94,80,62,26],[94,81,62,27,"query"],[94,86,62,32],[94,87,62,33],[94,90,62,36],[94,91,62,37,"dehydrateQuery"],[94,105,62,51],[94,106,62,52,"query"],[94,111,62,57],[94,113,62,59,"serializeData"],[94,126,62,72],[94,128,62,74,"shouldRedactErrors"],[94,146,62,92],[94,147,62,93],[94,148,62,94],[94,151,62,97],[94,153,63,2],[94,154,63,3],[95,4,64,2],[95,11,64,9],[96,6,64,11,"mutations"],[96,15,64,20],[97,6,64,22,"queries"],[98,4,64,30],[98,5,64,31],[99,2,65,0],[100,2,66,0],[100,11,66,9,"hydrate"],[100,18,66,16,"hydrate"],[100,19,66,17,"client"],[100,25,66,23],[100,27,66,25,"dehydratedState"],[100,42,66,40],[100,44,66,42,"options"],[100,51,66,49],[100,53,66,51],[101,4,67,2],[101,8,67,6],[101,15,67,13,"dehydratedState"],[101,30,67,28],[101,35,67,33],[101,43,67,41],[101,47,67,45,"dehydratedState"],[101,62,67,60],[101,67,67,65],[101,71,67,69],[101,73,67,71],[102,6,68,4],[103,4,69,2],[104,4,70,2],[104,10,70,8,"mutationCache"],[104,23,70,21],[104,26,70,24,"client"],[104,32,70,30],[104,33,70,31,"getMutationCache"],[104,49,70,47],[104,50,70,48],[104,51,70,49],[105,4,71,2],[105,10,71,8,"queryCache"],[105,20,71,18],[105,23,71,21,"client"],[105,29,71,27],[105,30,71,28,"getQueryCache"],[105,43,71,41],[105,44,71,42],[105,45,71,43],[106,4,72,2],[106,10,72,8,"deserializeData"],[106,25,72,23],[106,28,72,26,"options"],[106,35,72,33],[106,37,72,35,"defaultOptions"],[106,51,72,49],[106,53,72,51,"deserializeData"],[106,68,72,66],[106,72,72,70,"client"],[106,78,72,76],[106,79,72,77,"getDefaultOptions"],[106,96,72,94],[106,97,72,95],[106,98,72,96],[106,99,72,97,"hydrate"],[106,106,72,104],[106,108,72,106,"deserializeData"],[106,123,72,121],[106,127,72,125,"defaultTransformerFn"],[106,147,72,145],[107,4,73,2],[107,10,73,8,"mutations"],[107,19,73,17],[107,22,73,20,"dehydratedState"],[107,37,73,35],[107,38,73,36,"mutations"],[107,47,73,45],[107,51,73,49],[107,53,73,51],[108,4,74,2],[108,10,74,8,"queries"],[108,17,74,15],[108,20,74,18,"dehydratedState"],[108,35,74,33],[108,36,74,34,"queries"],[108,43,74,41],[108,47,74,45],[108,49,74,47],[109,4,75,2,"mutations"],[109,13,75,11],[109,14,75,12,"forEach"],[109,21,75,19],[109,22,75,20],[109,23,75,21],[110,6,75,23,"state"],[110,11,75,28],[111,6,75,30],[111,9,75,33,"mutationOptions"],[112,4,75,49],[112,5,75,50],[112,10,75,55],[113,6,76,4,"mutationCache"],[113,19,76,17],[113,20,76,18,"build"],[113,25,76,23],[113,26,77,6,"client"],[113,32,77,12],[113,34,78,6],[114,8,79,8],[114,11,79,11,"client"],[114,17,79,17],[114,18,79,18,"getDefaultOptions"],[114,35,79,35],[114,36,79,36],[114,37,79,37],[114,38,79,38,"hydrate"],[114,45,79,45],[114,47,79,47,"mutations"],[114,56,79,56],[115,8,80,8],[115,11,80,11,"options"],[115,18,80,18],[115,20,80,20,"defaultOptions"],[115,34,80,34],[115,36,80,36,"mutations"],[115,45,80,45],[116,8,81,8],[116,11,81,11,"mutationOptions"],[117,6,82,6],[117,7,82,7],[117,9,83,6,"state"],[117,14,84,4],[117,15,84,5],[118,4,85,2],[118,5,85,3],[118,6,85,4],[119,4,86,2,"queries"],[119,11,86,9],[119,12,86,10,"forEach"],[119,19,86,17],[119,20,87,4],[119,21,87,5],[120,6,87,7,"queryKey"],[120,14,87,15],[121,6,87,17,"state"],[121,11,87,22],[122,6,87,24,"queryHash"],[122,15,87,33],[123,6,87,35,"meta"],[123,10,87,39],[124,6,87,41,"promise"],[124,13,87,48],[125,6,87,50,"dehydratedAt"],[126,4,87,63],[126,5,87,64],[126,10,87,69],[127,6,88,6],[127,12,88,12,"syncData"],[127,20,88,20],[127,23,88,23,"promise"],[127,30,88,30],[127,33,88,33],[127,37,88,33,"tryResolveSync"],[127,48,88,47],[127,49,88,47,"tryResolveSync"],[127,63,88,47],[127,65,88,48,"promise"],[127,72,88,55],[127,73,88,56],[127,76,88,59],[127,81,88,64],[127,82,88,65],[128,6,89,6],[128,12,89,12,"rawData"],[128,19,89,19],[128,22,89,22,"state"],[128,27,89,27],[128,28,89,28,"data"],[128,32,89,32],[128,37,89,37],[128,42,89,42],[128,43,89,43],[128,46,89,46,"syncData"],[128,54,89,54],[128,56,89,56,"data"],[128,60,89,60],[128,63,89,63,"state"],[128,68,89,68],[128,69,89,69,"data"],[128,73,89,73],[129,6,90,6],[129,12,90,12,"data"],[129,16,90,16],[129,19,90,19,"rawData"],[129,26,90,26],[129,31,90,31],[129,36,90,36],[129,37,90,37],[129,40,90,40,"rawData"],[129,47,90,47],[129,50,90,50,"deserializeData"],[129,65,90,65],[129,66,90,66,"rawData"],[129,73,90,73],[129,74,90,74],[130,6,91,6],[130,10,91,10,"query"],[130,15,91,15],[130,18,91,18,"queryCache"],[130,28,91,28],[130,29,91,29,"get"],[130,32,91,32],[130,33,91,33,"queryHash"],[130,42,91,42],[130,43,91,43],[131,6,92,6],[131,12,92,12,"existingQueryIsPending"],[131,34,92,34],[131,37,92,37,"query"],[131,42,92,42],[131,44,92,44,"state"],[131,49,92,49],[131,50,92,50,"status"],[131,56,92,56],[131,61,92,61],[131,70,92,70],[132,6,93,6],[132,12,93,12,"existingQueryIsFetching"],[132,35,93,35],[132,38,93,38,"query"],[132,43,93,43],[132,45,93,45,"state"],[132,50,93,50],[132,51,93,51,"fetchStatus"],[132,62,93,62],[132,67,93,67],[132,77,93,77],[133,6,94,6],[133,10,94,10,"query"],[133,15,94,15],[133,17,94,17],[134,8,95,8],[134,14,95,14,"hasNewerSyncData"],[134,30,95,30],[134,33,95,33,"syncData"],[134,41,95,41],[135,8,95,45],[136,8,96,8],[137,8,97,8,"dehydratedAt"],[137,20,97,20],[137,25,97,25],[137,30,97,30],[137,31,97,31],[137,35,97,35,"dehydratedAt"],[137,47,97,47],[137,50,97,50,"query"],[137,55,97,55],[137,56,97,56,"state"],[137,61,97,61],[137,62,97,62,"dataUpdatedAt"],[137,75,97,75],[138,8,98,8],[138,12,98,12,"state"],[138,17,98,17],[138,18,98,18,"dataUpdatedAt"],[138,31,98,31],[138,34,98,34,"query"],[138,39,98,39],[138,40,98,40,"state"],[138,45,98,45],[138,46,98,46,"dataUpdatedAt"],[138,59,98,59],[138,63,98,63,"hasNewerSyncData"],[138,79,98,79],[138,81,98,81],[139,10,99,10],[139,16,99,16],[140,12,99,18,"fetchStatus"],[140,23,99,29],[140,25,99,31,"_ignored"],[140,33,99,39],[141,12,99,41],[141,15,99,44,"serializedState"],[142,10,99,60],[142,11,99,61],[142,14,99,64,"state"],[142,19,99,69],[143,10,100,10,"query"],[143,15,100,15],[143,16,100,16,"setState"],[143,24,100,24],[143,25,100,25],[144,12,101,12],[144,15,101,15,"serializedState"],[144,30,101,30],[145,12,102,12,"data"],[146,10,103,10],[146,11,103,11],[146,12,103,12],[147,8,104,8],[148,6,105,6],[148,7,105,7],[148,13,105,13],[149,8,106,8,"query"],[149,13,106,13],[149,16,106,16,"queryCache"],[149,26,106,26],[149,27,106,27,"build"],[149,32,106,32],[149,33,107,10,"client"],[149,39,107,16],[149,41,108,10],[150,10,109,12],[150,13,109,15,"client"],[150,19,109,21],[150,20,109,22,"getDefaultOptions"],[150,37,109,39],[150,38,109,40],[150,39,109,41],[150,40,109,42,"hydrate"],[150,47,109,49],[150,49,109,51,"queries"],[150,56,109,58],[151,10,110,12],[151,13,110,15,"options"],[151,20,110,22],[151,22,110,24,"defaultOptions"],[151,36,110,38],[151,38,110,40,"queries"],[151,45,110,47],[152,10,111,12,"queryKey"],[152,18,111,20],[153,10,112,12,"queryHash"],[153,19,112,21],[154,10,113,12,"meta"],[155,8,114,10],[155,9,114,11],[156,8,115,10],[157,8,116,10],[158,8,117,10],[159,10,118,12],[159,13,118,15,"state"],[159,18,118,20],[160,10,119,12,"data"],[160,14,119,16],[161,10,120,12,"fetchStatus"],[161,21,120,23],[161,23,120,25],[161,29,120,31],[162,10,121,12,"status"],[162,16,121,18],[162,18,121,20,"data"],[162,22,121,24],[162,27,121,29],[162,32,121,34],[162,33,121,35],[162,36,121,38],[162,45,121,47],[162,48,121,50,"state"],[162,53,121,55],[162,54,121,56,"status"],[163,8,122,10],[163,9,123,8],[163,10,123,9],[164,6,124,6],[165,6,125,6],[165,10,125,10,"promise"],[165,17,125,17],[165,21,125,21],[165,22,125,22,"existingQueryIsPending"],[165,44,125,44],[165,48,125,48],[165,49,125,49,"existingQueryIsFetching"],[165,72,125,72],[166,6,125,76],[167,6,126,6],[168,6,127,7,"dehydratedAt"],[168,18,127,19],[168,23,127,24],[168,28,127,29],[168,29,127,30],[168,33,127,34,"dehydratedAt"],[168,45,127,46],[168,48,127,49,"query"],[168,53,127,54],[168,54,127,55,"state"],[168,59,127,60],[168,60,127,61,"dataUpdatedAt"],[168,73,127,74],[168,74,127,75],[168,76,127,77],[169,8,128,8,"query"],[169,13,128,13],[169,14,128,14,"fetch"],[169,19,128,19],[169,20,128,20],[169,25,128,25],[169,26,128,26],[169,28,128,28],[170,10,129,10],[171,10,130,10,"initialPromise"],[171,24,130,24],[171,26,130,26,"Promise"],[171,33,130,33],[171,34,130,34,"resolve"],[171,41,130,41],[171,42,130,42,"promise"],[171,49,130,49],[171,50,130,50],[171,51,130,51,"then"],[171,55,130,55],[171,56,130,56,"deserializeData"],[171,71,130,71],[172,8,131,8],[172,9,131,9],[172,10,131,10],[172,11,131,11,"catch"],[172,16,131,16],[172,17,131,17,"noop"],[172,25,131,21],[172,26,131,21,"noop"],[172,30,131,21],[172,31,131,22],[173,6,132,6],[174,4,133,4],[174,5,134,2],[174,6,134,3],[175,2,135,0],[176,0,135,1],[176,3]],"functionMap":{"names":["<global>","defaultTransformerFn","dehydrateMutation","dehydrateQuery","query.promise.then._catch$argument_0","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","defaultShouldRedactErrors","dehydrate","client.getMutationCache.getAll.flatMap$argument_0","client.getQueryCache.getAll.flatMap$argument_0","hydrate","mutations.forEach$argument_0","queries.forEach$argument_0"],"mappings":"AAA;ACG;CDE;AEC;CFO;AGC;2DCC;GDU;CHiB;AKC;CLE;AMC;CNE;AOC;CPE;AQC;ICG,2ED;IEM,+FF;CRG;AWC;oBCS;GDU;IEE;KF8C;CXE"},"hasCjsExports":false},"type":"js/module"}]}