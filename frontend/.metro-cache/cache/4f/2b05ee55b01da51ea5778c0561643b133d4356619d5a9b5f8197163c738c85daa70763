{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.processWordCloudQuestion = processWordCloudQuestion;\n  exports.checkWordCloudAnswer = checkWordCloudAnswer;\n  /**\n   * Word Cloud Question Processor\n   * Generates word clouds with decoys based on stage progression\n   */\n\n  /**\n   * Calculate number of decoy words based on stage\n   * Early stages have fewer decoys, later stages have more\n   */\n  function getDecoyCount(stage, wordCount) {\n    // Stage 1-3: 2-3 decoys\n    // Stage 4-6: 4-5 decoys\n    // Stage 7-9: 6-8 decoys\n    const baseDecoys = Math.min(Math.floor(stage / 3) + 2, wordCount);\n    return Math.min(baseDecoys, Math.floor(wordCount * 0.5)); // Max 50% decoys\n  }\n\n  /**\n   * Generate decoy words that are similar to the actual words\n   */\n  function generateWordCloudDecoys(words, stage, allModuleWords) {\n    const decoyCount = getDecoyCount(stage, words.length);\n    const decoys = [];\n    const usedWords = new Set(words.map(w => w.toLowerCase()));\n\n    // Common word pool for decoys\n    const commonWords = ['the', 'a', 'an', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'should', 'can', 'could', 'may', 'might', 'must', 'shall', 'you', 'I', 'we', 'they', 'he', 'she', 'it', 'my', 'your', 'his', 'her', 'their', 'our', 'its', 'this', 'that', 'these', 'those', 'at', 'in', 'on', 'to', 'for', 'with', 'from', 'by', 'about', 'like', 'through', 'over', 'before', 'after', 'not', 'no', 'yes', 'but', 'or', 'and', 'so'];\n\n    // Build candidate pool from module words and common words\n    const candidatePool = [...(allModuleWords || []), ...commonWords].filter(w => !usedWords.has(w.toLowerCase())).filter((w, idx, self) => self.indexOf(w) === idx); // Remove duplicates\n\n    // Shuffle and select decoys\n    const shuffled = candidatePool.sort(() => Math.random() - 0.5);\n    for (let i = 0; i < Math.min(decoyCount, shuffled.length); i++) {\n      if (!usedWords.has(shuffled[i].toLowerCase())) {\n        decoys.push(shuffled[i]);\n        usedWords.add(shuffled[i].toLowerCase());\n      }\n    }\n\n    // If we still need more decoys, create variations\n    while (decoys.length < decoyCount) {\n      const randomWord = words[Math.floor(Math.random() * words.length)];\n      const variation = randomWord + 's'; // Simple pluralization\n      if (!usedWords.has(variation.toLowerCase())) {\n        decoys.push(variation);\n        usedWords.add(variation.toLowerCase());\n      }\n    }\n    return decoys;\n  }\n\n  /**\n   * Process a text phrase into a word cloud question\n   */\n  function processWordCloudQuestion(originalText, stage, allModuleWords) {\n    // Split text into words\n    const cleanText = originalText.trim();\n    const wordStrings = cleanText.split(/\\s+/).filter(w => w.length > 0);\n\n    // Create WordItem objects with unique IDs for each word instance\n    const words = wordStrings.map((word, index) => ({\n      word,\n      id: `word-${index}-${word}`\n    }));\n\n    // Generate decoys\n    const decoyStrings = generateWordCloudDecoys(wordStrings, stage, allModuleWords);\n    const decoys = decoyStrings.map((word, index) => ({\n      word,\n      id: `decoy-${index}-${word}`\n    }));\n    return {\n      words,\n      decoys,\n      correctOrder: words,\n      stage,\n      originalText: cleanText\n    };\n  }\n\n  /**\n   * Calculate Levenshtein distance (edit distance) between two word arrays\n   * This gives us a more accurate measure of how close the user was\n   */\n  function calculateEditDistance(arr1, arr2) {\n    const m = arr1.length;\n    const n = arr2.length;\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n\n    // Initialize base cases\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\n\n    // Fill the DP table\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (arr1[i - 1].toLowerCase() === arr2[j - 1].toLowerCase()) {\n          dp[i][j] = dp[i - 1][j - 1]; // No operation needed\n        } else {\n          dp[i][j] = Math.min(dp[i - 1][j] + 1,\n          // Deletion\n          dp[i][j - 1] + 1,\n          // Insertion\n          dp[i - 1][j - 1] + 1 // Substitution\n          );\n        }\n      }\n    }\n    return dp[m][n];\n  }\n\n  /**\n   * Check if the user's word order is correct\n   */\n  function checkWordCloudAnswer(processedQuestion, userOrder) {\n    const correctWords = processedQuestion.correctOrder;\n\n    // Extract word strings for comparison\n    const userWordStrings = userOrder.map(w => w.word);\n    const correctWordStrings = correctWords.map(w => w.word);\n\n    // Check exact match (case-insensitive)\n    const exactMatch = userOrder.length === correctWords.length && userOrder.every((wordItem, index) => wordItem.word.toLowerCase() === correctWords[index].word.toLowerCase());\n\n    // Calculate accuracy using edit distance\n    // This gives a more accurate representation of how close the user was\n    const editDistance = calculateEditDistance(userWordStrings, correctWordStrings);\n    const maxLength = Math.max(userOrder.length, correctWords.length);\n\n    // Accuracy = 1 - (editDistance / maxLength)\n    // This means if they got everything right, accuracy = 100%\n    // If they got 20 out of 21 words right, accuracy ≈ 95%\n    const accuracy = maxLength > 0 ? (maxLength - editDistance) / maxLength * 100 : 0;\n\n    // Calculate points based on accuracy threshold (70% to pass)\n    const passingThreshold = 70;\n    const passed = accuracy >= passingThreshold;\n\n    // Base points: stage × 50\n    const basePoints = processedQuestion.stage * 50;\n\n    // Accuracy bonus:\n    // 100% = full points\n    // 95-99% = 90% of points\n    // 85-94% = 80% of points\n    // 70-84% = 70% of points\n    let accuracyMultiplier = 0;\n    if (accuracy >= 100) {\n      accuracyMultiplier = 1.0;\n    } else if (accuracy >= 95) {\n      accuracyMultiplier = 0.9;\n    } else if (accuracy >= 85) {\n      accuracyMultiplier = 0.8;\n    } else if (accuracy >= 70) {\n      accuracyMultiplier = 0.7;\n    }\n    const pointsEarned = passed ? Math.round(basePoints * accuracyMultiplier) : 0;\n    return {\n      correct: exactMatch,\n      accuracy,\n      correctOrder: correctWordStrings,\n      pointsEarned\n    };\n  }\n});","lineCount":174,"map":[[7,2,87,0,"exports"],[7,9,87,0],[7,10,87,0,"processWordCloudQuestion"],[7,34,87,0],[7,37,87,0,"processWordCloudQuestion"],[7,61,87,0],[8,2,152,0,"exports"],[8,9,152,0],[8,10,152,0,"checkWordCloudAnswer"],[8,30,152,0],[8,33,152,0,"checkWordCloudAnswer"],[8,53,152,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[14,2,19,0],[15,0,20,0],[16,0,21,0],[17,0,22,0],[18,2,23,0],[18,11,23,9,"getDecoyCount"],[18,24,23,22,"getDecoyCount"],[18,25,23,23,"stage"],[18,30,23,36],[18,32,23,38,"wordCount"],[18,41,23,55],[18,43,23,65],[19,4,24,2],[20,4,25,2],[21,4,26,2],[22,4,27,2],[22,10,27,8,"baseDecoys"],[22,20,27,18],[22,23,27,21,"Math"],[22,27,27,25],[22,28,27,26,"min"],[22,31,27,29],[22,32,27,30,"Math"],[22,36,27,34],[22,37,27,35,"floor"],[22,42,27,40],[22,43,27,41,"stage"],[22,48,27,46],[22,51,27,49],[22,52,27,50],[22,53,27,51],[22,56,27,54],[22,57,27,55],[22,59,27,57,"wordCount"],[22,68,27,66],[22,69,27,67],[23,4,28,2],[23,11,28,9,"Math"],[23,15,28,13],[23,16,28,14,"min"],[23,19,28,17],[23,20,28,18,"baseDecoys"],[23,30,28,28],[23,32,28,30,"Math"],[23,36,28,34],[23,37,28,35,"floor"],[23,42,28,40],[23,43,28,41,"wordCount"],[23,52,28,50],[23,55,28,53],[23,58,28,56],[23,59,28,57],[23,60,28,58],[23,61,28,59],[23,62,28,60],[24,2,29,0],[26,2,31,0],[27,0,32,0],[28,0,33,0],[29,2,34,0],[29,11,34,9,"generateWordCloudDecoys"],[29,34,34,32,"generateWordCloudDecoys"],[29,35,35,2,"words"],[29,40,35,17],[29,42,36,2,"stage"],[29,47,36,15],[29,49,37,2,"allModuleWords"],[29,63,37,27],[29,65,38,12],[30,4,39,2],[30,10,39,8,"decoyCount"],[30,20,39,18],[30,23,39,21,"getDecoyCount"],[30,36,39,34],[30,37,39,35,"stage"],[30,42,39,40],[30,44,39,42,"words"],[30,49,39,47],[30,50,39,48,"length"],[30,56,39,54],[30,57,39,55],[31,4,40,2],[31,10,40,8,"decoys"],[31,16,40,24],[31,19,40,27],[31,21,40,29],[32,4,41,2],[32,10,41,8,"usedWords"],[32,19,41,17],[32,22,41,20],[32,26,41,24,"Set"],[32,29,41,27],[32,30,41,28,"words"],[32,35,41,33],[32,36,41,34,"map"],[32,39,41,37],[32,40,41,38,"w"],[32,41,41,39],[32,45,41,43,"w"],[32,46,41,44],[32,47,41,45,"toLowerCase"],[32,58,41,56],[32,59,41,57],[32,60,41,58],[32,61,41,59],[32,62,41,60],[34,4,43,2],[35,4,44,2],[35,10,44,8,"commonWords"],[35,21,44,19],[35,24,44,22],[35,25,45,4],[35,30,45,9],[35,32,45,11],[35,35,45,14],[35,37,45,16],[35,41,45,20],[35,43,45,22],[35,47,45,26],[35,49,45,28],[35,54,45,33],[35,56,45,35],[35,61,45,40],[35,63,45,42],[35,69,45,48],[35,71,45,50],[35,75,45,54],[35,77,45,56],[35,83,45,62],[35,85,45,64],[35,92,45,71],[35,94,46,4],[35,100,46,10],[35,102,46,12],[35,107,46,17],[35,109,46,19],[35,114,46,24],[35,116,46,26],[35,120,46,30],[35,122,46,32],[35,128,46,38],[35,130,46,40],[35,135,46,45],[35,137,46,47],[35,143,46,53],[35,145,46,55],[35,152,46,62],[35,154,46,64],[35,162,46,72],[35,164,47,4],[35,169,47,9],[35,171,47,11],[35,178,47,18],[35,180,47,20],[35,185,47,25],[35,187,47,27],[35,194,47,34],[35,196,47,36],[35,202,47,42],[35,204,47,44],[35,211,47,51],[35,213,48,4],[35,218,48,9],[35,220,48,11],[35,223,48,14],[35,225,48,16],[35,229,48,20],[35,231,48,22],[35,237,48,28],[35,239,48,30],[35,243,48,34],[35,245,48,36],[35,250,48,41],[35,252,48,43],[35,256,48,47],[35,258,49,4],[35,262,49,8],[35,264,49,10],[35,270,49,16],[35,272,49,18],[35,277,49,23],[35,279,49,25],[35,284,49,30],[35,286,49,32],[35,293,49,39],[35,295,49,41],[35,300,49,46],[35,302,49,48],[35,307,49,53],[35,309,50,4],[35,315,50,10],[35,317,50,12],[35,323,50,18],[35,325,50,20],[35,332,50,27],[35,334,50,29],[35,341,50,36],[35,343,51,4],[35,347,51,8],[35,349,51,10],[35,353,51,14],[35,355,51,16],[35,359,51,20],[35,361,51,22],[35,365,51,26],[35,367,51,28],[35,372,51,33],[35,374,51,35],[35,380,51,41],[35,382,51,43],[35,388,51,49],[35,390,51,51],[35,394,51,55],[35,396,52,4],[35,403,52,11],[35,405,52,13],[35,411,52,19],[35,413,52,21],[35,422,52,30],[35,424,52,32],[35,430,52,38],[35,432,52,40],[35,440,52,48],[35,442,52,50],[35,449,52,57],[35,451,53,4],[35,456,53,9],[35,458,53,11],[35,462,53,15],[35,464,53,17],[35,469,53,22],[35,471,53,24],[35,476,53,29],[35,478,53,31],[35,482,53,35],[35,484,53,37],[35,489,53,42],[35,491,53,44],[35,495,53,48],[35,496,54,3],[37,4,56,2],[38,4,57,2],[38,10,57,8,"candidatePool"],[38,23,57,21],[38,26,57,24],[38,27,57,25],[38,31,57,29,"allModuleWords"],[38,45,57,43],[38,49,57,47],[38,51,57,49],[38,52,57,50],[38,54,57,52],[38,57,57,55,"commonWords"],[38,68,57,66],[38,69,57,67],[38,70,58,5,"filter"],[38,76,58,11],[38,77,58,12,"w"],[38,78,58,13],[38,82,58,17],[38,83,58,18,"usedWords"],[38,92,58,27],[38,93,58,28,"has"],[38,96,58,31],[38,97,58,32,"w"],[38,98,58,33],[38,99,58,34,"toLowerCase"],[38,110,58,45],[38,111,58,46],[38,112,58,47],[38,113,58,48],[38,114,58,49],[38,115,59,5,"filter"],[38,121,59,11],[38,122,59,12],[38,123,59,13,"w"],[38,124,59,14],[38,126,59,16,"idx"],[38,129,59,19],[38,131,59,21,"self"],[38,135,59,25],[38,140,59,30,"self"],[38,144,59,34],[38,145,59,35,"indexOf"],[38,152,59,42],[38,153,59,43,"w"],[38,154,59,44],[38,155,59,45],[38,160,59,50,"idx"],[38,163,59,53],[38,164,59,54],[38,165,59,55],[38,166,59,56],[40,4,61,2],[41,4,62,2],[41,10,62,8,"shuffled"],[41,18,62,16],[41,21,62,19,"candidatePool"],[41,34,62,32],[41,35,62,33,"sort"],[41,39,62,37],[41,40,62,38],[41,46,62,44,"Math"],[41,50,62,48],[41,51,62,49,"random"],[41,57,62,55],[41,58,62,56],[41,59,62,57],[41,62,62,60],[41,65,62,63],[41,66,62,64],[42,4,64,2],[42,9,64,7],[42,13,64,11,"i"],[42,14,64,12],[42,17,64,15],[42,18,64,16],[42,20,64,18,"i"],[42,21,64,19],[42,24,64,22,"Math"],[42,28,64,26],[42,29,64,27,"min"],[42,32,64,30],[42,33,64,31,"decoyCount"],[42,43,64,41],[42,45,64,43,"shuffled"],[42,53,64,51],[42,54,64,52,"length"],[42,60,64,58],[42,61,64,59],[42,63,64,61,"i"],[42,64,64,62],[42,66,64,64],[42,68,64,66],[43,6,65,4],[43,10,65,8],[43,11,65,9,"usedWords"],[43,20,65,18],[43,21,65,19,"has"],[43,24,65,22],[43,25,65,23,"shuffled"],[43,33,65,31],[43,34,65,32,"i"],[43,35,65,33],[43,36,65,34],[43,37,65,35,"toLowerCase"],[43,48,65,46],[43,49,65,47],[43,50,65,48],[43,51,65,49],[43,53,65,51],[44,8,66,6,"decoys"],[44,14,66,12],[44,15,66,13,"push"],[44,19,66,17],[44,20,66,18,"shuffled"],[44,28,66,26],[44,29,66,27,"i"],[44,30,66,28],[44,31,66,29],[44,32,66,30],[45,8,67,6,"usedWords"],[45,17,67,15],[45,18,67,16,"add"],[45,21,67,19],[45,22,67,20,"shuffled"],[45,30,67,28],[45,31,67,29,"i"],[45,32,67,30],[45,33,67,31],[45,34,67,32,"toLowerCase"],[45,45,67,43],[45,46,67,44],[45,47,67,45],[45,48,67,46],[46,6,68,4],[47,4,69,2],[49,4,71,2],[50,4,72,2],[50,11,72,9,"decoys"],[50,17,72,15],[50,18,72,16,"length"],[50,24,72,22],[50,27,72,25,"decoyCount"],[50,37,72,35],[50,39,72,37],[51,6,73,4],[51,12,73,10,"randomWord"],[51,22,73,20],[51,25,73,23,"words"],[51,30,73,28],[51,31,73,29,"Math"],[51,35,73,33],[51,36,73,34,"floor"],[51,41,73,39],[51,42,73,40,"Math"],[51,46,73,44],[51,47,73,45,"random"],[51,53,73,51],[51,54,73,52],[51,55,73,53],[51,58,73,56,"words"],[51,63,73,61],[51,64,73,62,"length"],[51,70,73,68],[51,71,73,69],[51,72,73,70],[52,6,74,4],[52,12,74,10,"variation"],[52,21,74,19],[52,24,74,22,"randomWord"],[52,34,74,32],[52,37,74,35],[52,40,74,38],[52,41,74,39],[52,42,74,40],[53,6,75,4],[53,10,75,8],[53,11,75,9,"usedWords"],[53,20,75,18],[53,21,75,19,"has"],[53,24,75,22],[53,25,75,23,"variation"],[53,34,75,32],[53,35,75,33,"toLowerCase"],[53,46,75,44],[53,47,75,45],[53,48,75,46],[53,49,75,47],[53,51,75,49],[54,8,76,6,"decoys"],[54,14,76,12],[54,15,76,13,"push"],[54,19,76,17],[54,20,76,18,"variation"],[54,29,76,27],[54,30,76,28],[55,8,77,6,"usedWords"],[55,17,77,15],[55,18,77,16,"add"],[55,21,77,19],[55,22,77,20,"variation"],[55,31,77,29],[55,32,77,30,"toLowerCase"],[55,43,77,41],[55,44,77,42],[55,45,77,43],[55,46,77,44],[56,6,78,4],[57,4,79,2],[58,4,81,2],[58,11,81,9,"decoys"],[58,17,81,15],[59,2,82,0],[61,2,84,0],[62,0,85,0],[63,0,86,0],[64,2,87,7],[64,11,87,16,"processWordCloudQuestion"],[64,35,87,40,"processWordCloudQuestion"],[64,36,88,2,"originalText"],[64,48,88,22],[64,50,89,2,"stage"],[64,55,89,15],[64,57,90,2,"allModuleWords"],[64,71,90,27],[64,73,91,22],[65,4,92,2],[66,4,93,2],[66,10,93,8,"cleanText"],[66,19,93,17],[66,22,93,20,"originalText"],[66,34,93,32],[66,35,93,33,"trim"],[66,39,93,37],[66,40,93,38],[66,41,93,39],[67,4,94,2],[67,10,94,8,"wordStrings"],[67,21,94,19],[67,24,94,22,"cleanText"],[67,33,94,31],[67,34,94,32,"split"],[67,39,94,37],[67,40,94,38],[67,45,94,43],[67,46,94,44],[67,47,94,45,"filter"],[67,53,94,51],[67,54,94,52,"w"],[67,55,94,53],[67,59,94,57,"w"],[67,60,94,58],[67,61,94,59,"length"],[67,67,94,65],[67,70,94,68],[67,71,94,69],[67,72,94,70],[69,4,96,2],[70,4,97,2],[70,10,97,8,"words"],[70,15,97,25],[70,18,97,28,"wordStrings"],[70,29,97,39],[70,30,97,40,"map"],[70,33,97,43],[70,34,97,44],[70,35,97,45,"word"],[70,39,97,49],[70,41,97,51,"index"],[70,46,97,56],[70,52,97,62],[71,6,98,4,"word"],[71,10,98,8],[72,6,99,4,"id"],[72,8,99,6],[72,10,99,8],[72,18,99,16,"index"],[72,23,99,21],[72,27,99,25,"word"],[72,31,99,29],[73,4,100,2],[73,5,100,3],[73,6,100,4],[73,7,100,5],[75,4,102,2],[76,4,103,2],[76,10,103,8,"decoyStrings"],[76,22,103,20],[76,25,103,23,"generateWordCloudDecoys"],[76,48,103,46],[76,49,103,47,"wordStrings"],[76,60,103,58],[76,62,103,60,"stage"],[76,67,103,65],[76,69,103,67,"allModuleWords"],[76,83,103,81],[76,84,103,82],[77,4,104,2],[77,10,104,8,"decoys"],[77,16,104,26],[77,19,104,29,"decoyStrings"],[77,31,104,41],[77,32,104,42,"map"],[77,35,104,45],[77,36,104,46],[77,37,104,47,"word"],[77,41,104,51],[77,43,104,53,"index"],[77,48,104,58],[77,54,104,64],[78,6,105,4,"word"],[78,10,105,8],[79,6,106,4,"id"],[79,8,106,6],[79,10,106,8],[79,19,106,17,"index"],[79,24,106,22],[79,28,106,26,"word"],[79,32,106,30],[80,4,107,2],[80,5,107,3],[80,6,107,4],[80,7,107,5],[81,4,109,2],[81,11,109,9],[82,6,110,4,"words"],[82,11,110,9],[83,6,111,4,"decoys"],[83,12,111,10],[84,6,112,4,"correctOrder"],[84,18,112,16],[84,20,112,18,"words"],[84,25,112,23],[85,6,113,4,"stage"],[85,11,113,9],[86,6,114,4,"originalText"],[86,18,114,16],[86,20,114,18,"cleanText"],[87,4,115,2],[87,5,115,3],[88,2,116,0],[90,2,118,0],[91,0,119,0],[92,0,120,0],[93,0,121,0],[94,2,122,0],[94,11,122,9,"calculateEditDistance"],[94,32,122,30,"calculateEditDistance"],[94,33,122,31,"arr1"],[94,37,122,45],[94,39,122,47,"arr2"],[94,43,122,61],[94,45,122,71],[95,4,123,2],[95,10,123,8,"m"],[95,11,123,9],[95,14,123,12,"arr1"],[95,18,123,16],[95,19,123,17,"length"],[95,25,123,23],[96,4,124,2],[96,10,124,8,"n"],[96,11,124,9],[96,14,124,12,"arr2"],[96,18,124,16],[96,19,124,17,"length"],[96,25,124,23],[97,4,125,2],[97,10,125,8,"dp"],[97,12,125,22],[97,15,125,25,"Array"],[97,20,125,30],[97,21,125,31,"m"],[97,22,125,32],[97,25,125,35],[97,26,125,36],[97,27,125,37],[97,28,125,38,"fill"],[97,32,125,42],[97,33,125,43],[97,37,125,47],[97,38,125,48],[97,39,125,49,"map"],[97,42,125,52],[97,43,125,53],[97,49,125,59,"Array"],[97,54,125,64],[97,55,125,65,"n"],[97,56,125,66],[97,59,125,69],[97,60,125,70],[97,61,125,71],[97,62,125,72,"fill"],[97,66,125,76],[97,67,125,77],[97,68,125,78],[97,69,125,79],[97,70,125,80],[99,4,127,2],[100,4,128,2],[100,9,128,7],[100,13,128,11,"i"],[100,14,128,12],[100,17,128,15],[100,18,128,16],[100,20,128,18,"i"],[100,21,128,19],[100,25,128,23,"m"],[100,26,128,24],[100,28,128,26,"i"],[100,29,128,27],[100,31,128,29],[100,33,128,31,"dp"],[100,35,128,33],[100,36,128,34,"i"],[100,37,128,35],[100,38,128,36],[100,39,128,37],[100,40,128,38],[100,41,128,39],[100,44,128,42,"i"],[100,45,128,43],[101,4,129,2],[101,9,129,7],[101,13,129,11,"j"],[101,14,129,12],[101,17,129,15],[101,18,129,16],[101,20,129,18,"j"],[101,21,129,19],[101,25,129,23,"n"],[101,26,129,24],[101,28,129,26,"j"],[101,29,129,27],[101,31,129,29],[101,33,129,31,"dp"],[101,35,129,33],[101,36,129,34],[101,37,129,35],[101,38,129,36],[101,39,129,37,"j"],[101,40,129,38],[101,41,129,39],[101,44,129,42,"j"],[101,45,129,43],[103,4,131,2],[104,4,132,2],[104,9,132,7],[104,13,132,11,"i"],[104,14,132,12],[104,17,132,15],[104,18,132,16],[104,20,132,18,"i"],[104,21,132,19],[104,25,132,23,"m"],[104,26,132,24],[104,28,132,26,"i"],[104,29,132,27],[104,31,132,29],[104,33,132,31],[105,6,133,4],[105,11,133,9],[105,15,133,13,"j"],[105,16,133,14],[105,19,133,17],[105,20,133,18],[105,22,133,20,"j"],[105,23,133,21],[105,27,133,25,"n"],[105,28,133,26],[105,30,133,28,"j"],[105,31,133,29],[105,33,133,31],[105,35,133,33],[106,8,134,6],[106,12,134,10,"arr1"],[106,16,134,14],[106,17,134,15,"i"],[106,18,134,16],[106,21,134,19],[106,22,134,20],[106,23,134,21],[106,24,134,22,"toLowerCase"],[106,35,134,33],[106,36,134,34],[106,37,134,35],[106,42,134,40,"arr2"],[106,46,134,44],[106,47,134,45,"j"],[106,48,134,46],[106,51,134,49],[106,52,134,50],[106,53,134,51],[106,54,134,52,"toLowerCase"],[106,65,134,63],[106,66,134,64],[106,67,134,65],[106,69,134,67],[107,10,135,8,"dp"],[107,12,135,10],[107,13,135,11,"i"],[107,14,135,12],[107,15,135,13],[107,16,135,14,"j"],[107,17,135,15],[107,18,135,16],[107,21,135,19,"dp"],[107,23,135,21],[107,24,135,22,"i"],[107,25,135,23],[107,28,135,26],[107,29,135,27],[107,30,135,28],[107,31,135,29,"j"],[107,32,135,30],[107,35,135,33],[107,36,135,34],[107,37,135,35],[107,38,135,36],[107,39,135,37],[108,8,136,6],[108,9,136,7],[108,15,136,13],[109,10,137,8,"dp"],[109,12,137,10],[109,13,137,11,"i"],[109,14,137,12],[109,15,137,13],[109,16,137,14,"j"],[109,17,137,15],[109,18,137,16],[109,21,137,19,"Math"],[109,25,137,23],[109,26,137,24,"min"],[109,29,137,27],[109,30,138,10,"dp"],[109,32,138,12],[109,33,138,13,"i"],[109,34,138,14],[109,37,138,17],[109,38,138,18],[109,39,138,19],[109,40,138,20,"j"],[109,41,138,21],[109,42,138,22],[109,45,138,25],[109,46,138,26],[110,10,138,32],[111,10,139,10,"dp"],[111,12,139,12],[111,13,139,13,"i"],[111,14,139,14],[111,15,139,15],[111,16,139,16,"j"],[111,17,139,17],[111,20,139,20],[111,21,139,21],[111,22,139,22],[111,25,139,25],[111,26,139,26],[112,10,139,32],[113,10,140,10,"dp"],[113,12,140,12],[113,13,140,13,"i"],[113,14,140,14],[113,17,140,17],[113,18,140,18],[113,19,140,19],[113,20,140,20,"j"],[113,21,140,21],[113,24,140,24],[113,25,140,25],[113,26,140,26],[113,29,140,29],[113,30,140,30],[113,31,140,32],[114,10,141,8],[114,11,141,9],[115,8,142,6],[116,6,143,4],[117,4,144,2],[118,4,146,2],[118,11,146,9,"dp"],[118,13,146,11],[118,14,146,12,"m"],[118,15,146,13],[118,16,146,14],[118,17,146,15,"n"],[118,18,146,16],[118,19,146,17],[119,2,147,0],[121,2,149,0],[122,0,150,0],[123,0,151,0],[124,2,152,7],[124,11,152,16,"checkWordCloudAnswer"],[124,31,152,36,"checkWordCloudAnswer"],[124,32,153,2,"processedQuestion"],[124,49,153,39],[124,51,154,2,"userOrder"],[124,60,154,23],[124,62,160,2],[125,4,161,2],[125,10,161,8,"correctWords"],[125,22,161,20],[125,25,161,23,"processedQuestion"],[125,42,161,40],[125,43,161,41,"correctOrder"],[125,55,161,53],[127,4,163,2],[128,4,164,2],[128,10,164,8,"userWordStrings"],[128,25,164,23],[128,28,164,26,"userOrder"],[128,37,164,35],[128,38,164,36,"map"],[128,41,164,39],[128,42,164,40,"w"],[128,43,164,41],[128,47,164,45,"w"],[128,48,164,46],[128,49,164,47,"word"],[128,53,164,51],[128,54,164,52],[129,4,165,2],[129,10,165,8,"correctWordStrings"],[129,28,165,26],[129,31,165,29,"correctWords"],[129,43,165,41],[129,44,165,42,"map"],[129,47,165,45],[129,48,165,46,"w"],[129,49,165,47],[129,53,165,51,"w"],[129,54,165,52],[129,55,165,53,"word"],[129,59,165,57],[129,60,165,58],[131,4,167,2],[132,4,168,2],[132,10,168,8,"exactMatch"],[132,20,168,18],[132,23,168,21,"userOrder"],[132,32,168,30],[132,33,168,31,"length"],[132,39,168,37],[132,44,168,42,"correctWords"],[132,56,168,54],[132,57,168,55,"length"],[132,63,168,61],[132,67,169,4,"userOrder"],[132,76,169,13],[132,77,169,14,"every"],[132,82,169,19],[132,83,169,20],[132,84,169,21,"wordItem"],[132,92,169,29],[132,94,169,31,"index"],[132,99,169,36],[132,104,170,6,"wordItem"],[132,112,170,14],[132,113,170,15,"word"],[132,117,170,19],[132,118,170,20,"toLowerCase"],[132,129,170,31],[132,130,170,32],[132,131,170,33],[132,136,170,38,"correctWords"],[132,148,170,50],[132,149,170,51,"index"],[132,154,170,56],[132,155,170,57],[132,156,170,58,"word"],[132,160,170,62],[132,161,170,63,"toLowerCase"],[132,172,170,74],[132,173,170,75],[132,174,171,4],[132,175,171,5],[134,4,173,2],[135,4,174,2],[136,4,175,2],[136,10,175,8,"editDistance"],[136,22,175,20],[136,25,175,23,"calculateEditDistance"],[136,46,175,44],[136,47,175,45,"userWordStrings"],[136,62,175,60],[136,64,175,62,"correctWordStrings"],[136,82,175,80],[136,83,175,81],[137,4,176,2],[137,10,176,8,"maxLength"],[137,19,176,17],[137,22,176,20,"Math"],[137,26,176,24],[137,27,176,25,"max"],[137,30,176,28],[137,31,176,29,"userOrder"],[137,40,176,38],[137,41,176,39,"length"],[137,47,176,45],[137,49,176,47,"correctWords"],[137,61,176,59],[137,62,176,60,"length"],[137,68,176,66],[137,69,176,67],[139,4,178,2],[140,4,179,2],[141,4,180,2],[142,4,181,2],[142,10,181,8,"accuracy"],[142,18,181,16],[142,21,181,19,"maxLength"],[142,30,181,28],[142,33,181,31],[142,34,181,32],[142,37,182,7],[142,38,182,8,"maxLength"],[142,47,182,17],[142,50,182,20,"editDistance"],[142,62,182,32],[142,66,182,36,"maxLength"],[142,75,182,45],[142,78,182,49],[142,81,182,52],[142,84,183,6],[142,85,183,7],[144,4,185,2],[145,4,186,2],[145,10,186,8,"passingThreshold"],[145,26,186,24],[145,29,186,27],[145,31,186,29],[146,4,187,2],[146,10,187,8,"passed"],[146,16,187,14],[146,19,187,17,"accuracy"],[146,27,187,25],[146,31,187,29,"passingThreshold"],[146,47,187,45],[148,4,189,2],[149,4,190,2],[149,10,190,8,"basePoints"],[149,20,190,18],[149,23,190,21,"processedQuestion"],[149,40,190,38],[149,41,190,39,"stage"],[149,46,190,44],[149,49,190,47],[149,51,190,49],[151,4,192,2],[152,4,193,2],[153,4,194,2],[154,4,195,2],[155,4,196,2],[156,4,197,2],[156,8,197,6,"accuracyMultiplier"],[156,26,197,24],[156,29,197,27],[156,30,197,28],[157,4,198,2],[157,8,198,6,"accuracy"],[157,16,198,14],[157,20,198,18],[157,23,198,21],[157,25,198,23],[158,6,199,4,"accuracyMultiplier"],[158,24,199,22],[158,27,199,25],[158,30,199,28],[159,4,200,2],[159,5,200,3],[159,11,200,9],[159,15,200,13,"accuracy"],[159,23,200,21],[159,27,200,25],[159,29,200,27],[159,31,200,29],[160,6,201,4,"accuracyMultiplier"],[160,24,201,22],[160,27,201,25],[160,30,201,28],[161,4,202,2],[161,5,202,3],[161,11,202,9],[161,15,202,13,"accuracy"],[161,23,202,21],[161,27,202,25],[161,29,202,27],[161,31,202,29],[162,6,203,4,"accuracyMultiplier"],[162,24,203,22],[162,27,203,25],[162,30,203,28],[163,4,204,2],[163,5,204,3],[163,11,204,9],[163,15,204,13,"accuracy"],[163,23,204,21],[163,27,204,25],[163,29,204,27],[163,31,204,29],[164,6,205,4,"accuracyMultiplier"],[164,24,205,22],[164,27,205,25],[164,30,205,28],[165,4,206,2],[166,4,208,2],[166,10,208,8,"pointsEarned"],[166,22,208,20],[166,25,208,23,"passed"],[166,31,208,29],[166,34,209,6,"Math"],[166,38,209,10],[166,39,209,11,"round"],[166,44,209,16],[166,45,209,17,"basePoints"],[166,55,209,27],[166,58,209,30,"accuracyMultiplier"],[166,76,209,48],[166,77,209,49],[166,80,210,6],[166,81,210,7],[167,4,212,2],[167,11,212,9],[168,6,213,4,"correct"],[168,13,213,11],[168,15,213,13,"exactMatch"],[168,25,213,23],[169,6,214,4,"accuracy"],[169,14,214,12],[170,6,215,4,"correctOrder"],[170,18,215,16],[170,20,215,18,"correctWordStrings"],[170,38,215,36],[171,6,216,4,"pointsEarned"],[172,4,217,2],[172,5,217,3],[173,2,218,0],[174,0,218,1],[174,3]],"functionMap":{"names":["<global>","getDecoyCount","generateWordCloudDecoys","words.map$argument_0","filter$argument_0","filter.filter$argument_0","candidatePool.sort$argument_0","processWordCloudQuestion","cleanText.split.filter$argument_0","wordStrings.map$argument_0","decoyStrings.map$argument_0","calculateEditDistance","Array.fill.map$argument_0","checkWordCloudAnswer","userOrder.map$argument_0","correctWords.map$argument_0","userOrder.every$argument_0"],"mappings":"AAA;ACsB;CDM;AEK;sCCO,oBD;YEiB,oCF;YGC,yCH;sCIG,yBJ;CFoB;OOK;oDCO,iBD;4CEG;IFG;8CGI;IHG;CPS;AWM;qDCG,0BD;CXsB;OaK;wCCY,WD;8CEC,WF;oBGI;4EHC;CbgD"},"hasCjsExports":false},"type":"js/module"}]}