{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.processVerbalQuestion = processVerbalQuestion;\n  exports.checkVerbalAnswer = checkVerbalAnswer;\n  /**\n   * Verbal Speaking Processor\n   * Handles processing of verbal speaking questions with progressive word removal\n   */\n\n  /**\n   * Process verbal question with stage-based word removal\n   * Stage 1: 10-15% words removed\n   * Stage 9: 90-95% words removed\n   */\n  function processVerbalQuestion(text, stage) {\n    // Clean and split text into words\n    const cleanText = text.trim();\n    const words = cleanText.split(/\\s+/);\n    const totalWords = words.length;\n\n    // Calculate how many words to remove based on stage (10% per stage)\n    const removalPercentage = Math.min(stage * 10, 95);\n    const minWordsToRemove = Math.floor(totalWords * (removalPercentage / 100));\n    const maxWordsToRemove = Math.ceil(totalWords * ((removalPercentage + 5) / 100));\n    const wordsToRemove = Math.min(Math.floor(Math.random() * (maxWordsToRemove - minWordsToRemove + 1)) + minWordsToRemove, totalWords);\n\n    // Select random words to remove\n    const indicesToRemove = new Set();\n    const removedWords = [];\n    while (indicesToRemove.size < wordsToRemove) {\n      const randomIndex = Math.floor(Math.random() * totalWords);\n      if (!indicesToRemove.has(randomIndex)) {\n        indicesToRemove.add(randomIndex);\n        removedWords.push(words[randomIndex]);\n      }\n    }\n\n    // Create display text with blanks (___) for removed words\n    const displayWords = words.map((word, index) => indicesToRemove.has(index) ? '___' : word);\n    return {\n      displayText: displayWords.join(' '),\n      fullText: cleanText,\n      stage,\n      wordsRemoved: wordsToRemove,\n      totalWords,\n      removedWords\n    };\n  }\n\n  /**\n   * Calculate accuracy using Levenshtein Distance algorithm\n   * More forgiving than exact string comparison\n   */\n  function levenshteinDistance(str1, str2) {\n    const m = str1.length;\n    const n = str2.length;\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (str1[i - 1] === str2[j - 1]) {\n          dp[i][j] = dp[i - 1][j - 1];\n        } else {\n          dp[i][j] = Math.min(dp[i - 1][j - 1] + 1,\n          // substitution\n          dp[i - 1][j] + 1,\n          // deletion\n          dp[i][j - 1] + 1 // insertion\n          );\n        }\n      }\n    }\n    return dp[m][n];\n  }\n\n  /**\n   * Check verbal answer against correct text\n   * Uses Levenshtein Distance for more forgiving comparison\n   */\n  function checkVerbalAnswer(question, spokenText) {\n    // Normalize both texts for comparison\n    const normalizeText = text => text.toLowerCase().replace(/[^\\w\\s]/g, '').trim();\n    const normalizedCorrect = normalizeText(question.fullText);\n    const normalizedSpoken = normalizeText(spokenText);\n\n    // Calculate Levenshtein distance\n    const distance = levenshteinDistance(normalizedCorrect, normalizedSpoken);\n    const maxLength = Math.max(normalizedCorrect.length, normalizedSpoken.length);\n\n    // Calculate accuracy percentage (100% - error percentage)\n    const accuracy = maxLength > 0 ? Math.max(0, 100 - distance / maxLength * 100) : 100;\n\n    // Consider correct if accuracy >= 70%\n    const isCorrect = accuracy >= 70;\n    return {\n      isCorrect,\n      accuracy: Math.round(accuracy * 10) / 10,\n      // Round to 1 decimal place\n      correctAnswer: question.fullText,\n      userAnswer: spokenText\n    };\n  }\n});","lineCount":108,"map":[[7,2,20,0,"exports"],[7,9,20,0],[7,10,20,0,"processVerbalQuestion"],[7,31,20,0],[7,34,20,0,"processVerbalQuestion"],[7,55,20,0],[8,2,98,0,"exports"],[8,9,98,0],[8,10,98,0,"checkVerbalAnswer"],[8,27,98,0],[8,30,98,0,"checkVerbalAnswer"],[8,47,98,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[14,2,15,0],[15,0,16,0],[16,0,17,0],[17,0,18,0],[18,0,19,0],[19,2,20,7],[19,11,20,16,"processVerbalQuestion"],[19,32,20,37,"processVerbalQuestion"],[19,33,21,2,"text"],[19,37,21,14],[19,39,22,2,"stage"],[19,44,22,15],[19,46,23,18],[20,4,24,2],[21,4,25,2],[21,10,25,8,"cleanText"],[21,19,25,17],[21,22,25,20,"text"],[21,26,25,24],[21,27,25,25,"trim"],[21,31,25,29],[21,32,25,30],[21,33,25,31],[22,4,26,2],[22,10,26,8,"words"],[22,15,26,13],[22,18,26,16,"cleanText"],[22,27,26,25],[22,28,26,26,"split"],[22,33,26,31],[22,34,26,32],[22,39,26,37],[22,40,26,38],[23,4,27,2],[23,10,27,8,"totalWords"],[23,20,27,18],[23,23,27,21,"words"],[23,28,27,26],[23,29,27,27,"length"],[23,35,27,33],[25,4,29,2],[26,4,30,2],[26,10,30,8,"removalPercentage"],[26,27,30,25],[26,30,30,28,"Math"],[26,34,30,32],[26,35,30,33,"min"],[26,38,30,36],[26,39,30,37,"stage"],[26,44,30,42],[26,47,30,45],[26,49,30,47],[26,51,30,49],[26,53,30,51],[26,54,30,52],[27,4,31,2],[27,10,31,8,"minWordsToRemove"],[27,26,31,24],[27,29,31,27,"Math"],[27,33,31,31],[27,34,31,32,"floor"],[27,39,31,37],[27,40,31,38,"totalWords"],[27,50,31,48],[27,54,31,52,"removalPercentage"],[27,71,31,69],[27,74,31,72],[27,77,31,75],[27,78,31,76],[27,79,31,77],[28,4,32,2],[28,10,32,8,"maxWordsToRemove"],[28,26,32,24],[28,29,32,27,"Math"],[28,33,32,31],[28,34,32,32,"ceil"],[28,38,32,36],[28,39,32,37,"totalWords"],[28,49,32,47],[28,53,32,51],[28,54,32,52,"removalPercentage"],[28,71,32,69],[28,74,32,72],[28,75,32,73],[28,79,32,77],[28,82,32,80],[28,83,32,81],[28,84,32,82],[29,4,33,2],[29,10,33,8,"wordsToRemove"],[29,23,33,21],[29,26,33,24,"Math"],[29,30,33,28],[29,31,33,29,"min"],[29,34,33,32],[29,35,34,4,"Math"],[29,39,34,8],[29,40,34,9,"floor"],[29,45,34,14],[29,46,34,15,"Math"],[29,50,34,19],[29,51,34,20,"random"],[29,57,34,26],[29,58,34,27],[29,59,34,28],[29,63,34,32,"maxWordsToRemove"],[29,79,34,48],[29,82,34,51,"minWordsToRemove"],[29,98,34,67],[29,101,34,70],[29,102,34,71],[29,103,34,72],[29,104,34,73],[29,107,34,76,"minWordsToRemove"],[29,123,34,92],[29,125,35,4,"totalWords"],[29,135,36,2],[29,136,36,3],[31,4,38,2],[32,4,39,2],[32,10,39,8,"indicesToRemove"],[32,25,39,23],[32,28,39,26],[32,32,39,30,"Set"],[32,35,39,33],[32,36,39,42],[32,37,39,43],[33,4,40,2],[33,10,40,8,"removedWords"],[33,22,40,30],[33,25,40,33],[33,27,40,35],[34,4,42,2],[34,11,42,9,"indicesToRemove"],[34,26,42,24],[34,27,42,25,"size"],[34,31,42,29],[34,34,42,32,"wordsToRemove"],[34,47,42,45],[34,49,42,47],[35,6,43,4],[35,12,43,10,"randomIndex"],[35,23,43,21],[35,26,43,24,"Math"],[35,30,43,28],[35,31,43,29,"floor"],[35,36,43,34],[35,37,43,35,"Math"],[35,41,43,39],[35,42,43,40,"random"],[35,48,43,46],[35,49,43,47],[35,50,43,48],[35,53,43,51,"totalWords"],[35,63,43,61],[35,64,43,62],[36,6,44,4],[36,10,44,8],[36,11,44,9,"indicesToRemove"],[36,26,44,24],[36,27,44,25,"has"],[36,30,44,28],[36,31,44,29,"randomIndex"],[36,42,44,40],[36,43,44,41],[36,45,44,43],[37,8,45,6,"indicesToRemove"],[37,23,45,21],[37,24,45,22,"add"],[37,27,45,25],[37,28,45,26,"randomIndex"],[37,39,45,37],[37,40,45,38],[38,8,46,6,"removedWords"],[38,20,46,18],[38,21,46,19,"push"],[38,25,46,23],[38,26,46,24,"words"],[38,31,46,29],[38,32,46,30,"randomIndex"],[38,43,46,41],[38,44,46,42],[38,45,46,43],[39,6,47,4],[40,4,48,2],[42,4,50,2],[43,4,51,2],[43,10,51,8,"displayWords"],[43,22,51,20],[43,25,51,23,"words"],[43,30,51,28],[43,31,51,29,"map"],[43,34,51,32],[43,35,51,33],[43,36,51,34,"word"],[43,40,51,38],[43,42,51,40,"index"],[43,47,51,45],[43,52,52,4,"indicesToRemove"],[43,67,52,19],[43,68,52,20,"has"],[43,71,52,23],[43,72,52,24,"index"],[43,77,52,29],[43,78,52,30],[43,81,52,33],[43,86,52,38],[43,89,52,41,"word"],[43,93,53,2],[43,94,53,3],[44,4,55,2],[44,11,55,9],[45,6,56,4,"displayText"],[45,17,56,15],[45,19,56,17,"displayWords"],[45,31,56,29],[45,32,56,30,"join"],[45,36,56,34],[45,37,56,35],[45,40,56,38],[45,41,56,39],[46,6,57,4,"fullText"],[46,14,57,12],[46,16,57,14,"cleanText"],[46,25,57,23],[47,6,58,4,"stage"],[47,11,58,9],[48,6,59,4,"wordsRemoved"],[48,18,59,16],[48,20,59,18,"wordsToRemove"],[48,33,59,31],[49,6,60,4,"totalWords"],[49,16,60,14],[50,6,61,4,"removedWords"],[51,4,62,2],[51,5,62,3],[52,2,63,0],[54,2,65,0],[55,0,66,0],[56,0,67,0],[57,0,68,0],[58,2,69,0],[58,11,69,9,"levenshteinDistance"],[58,30,69,28,"levenshteinDistance"],[58,31,69,29,"str1"],[58,35,69,41],[58,37,69,43,"str2"],[58,41,69,55],[58,43,69,65],[59,4,70,2],[59,10,70,8,"m"],[59,11,70,9],[59,14,70,12,"str1"],[59,18,70,16],[59,19,70,17,"length"],[59,25,70,23],[60,4,71,2],[60,10,71,8,"n"],[60,11,71,9],[60,14,71,12,"str2"],[60,18,71,16],[60,19,71,17,"length"],[60,25,71,23],[61,4,72,2],[61,10,72,8,"dp"],[61,12,72,22],[61,15,72,25,"Array"],[61,20,72,30],[61,21,72,31,"m"],[61,22,72,32],[61,25,72,35],[61,26,72,36],[61,27,72,37],[61,28,72,38,"fill"],[61,32,72,42],[61,33,72,43],[61,37,72,47],[61,38,72,48],[61,39,72,49,"map"],[61,42,72,52],[61,43,72,53],[61,49,72,59,"Array"],[61,54,72,64],[61,55,72,65,"n"],[61,56,72,66],[61,59,72,69],[61,60,72,70],[61,61,72,71],[61,62,72,72,"fill"],[61,66,72,76],[61,67,72,77],[61,68,72,78],[61,69,72,79],[61,70,72,80],[62,4,74,2],[62,9,74,7],[62,13,74,11,"i"],[62,14,74,12],[62,17,74,15],[62,18,74,16],[62,20,74,18,"i"],[62,21,74,19],[62,25,74,23,"m"],[62,26,74,24],[62,28,74,26,"i"],[62,29,74,27],[62,31,74,29],[62,33,74,31,"dp"],[62,35,74,33],[62,36,74,34,"i"],[62,37,74,35],[62,38,74,36],[62,39,74,37],[62,40,74,38],[62,41,74,39],[62,44,74,42,"i"],[62,45,74,43],[63,4,75,2],[63,9,75,7],[63,13,75,11,"j"],[63,14,75,12],[63,17,75,15],[63,18,75,16],[63,20,75,18,"j"],[63,21,75,19],[63,25,75,23,"n"],[63,26,75,24],[63,28,75,26,"j"],[63,29,75,27],[63,31,75,29],[63,33,75,31,"dp"],[63,35,75,33],[63,36,75,34],[63,37,75,35],[63,38,75,36],[63,39,75,37,"j"],[63,40,75,38],[63,41,75,39],[63,44,75,42,"j"],[63,45,75,43],[64,4,77,2],[64,9,77,7],[64,13,77,11,"i"],[64,14,77,12],[64,17,77,15],[64,18,77,16],[64,20,77,18,"i"],[64,21,77,19],[64,25,77,23,"m"],[64,26,77,24],[64,28,77,26,"i"],[64,29,77,27],[64,31,77,29],[64,33,77,31],[65,6,78,4],[65,11,78,9],[65,15,78,13,"j"],[65,16,78,14],[65,19,78,17],[65,20,78,18],[65,22,78,20,"j"],[65,23,78,21],[65,27,78,25,"n"],[65,28,78,26],[65,30,78,28,"j"],[65,31,78,29],[65,33,78,31],[65,35,78,33],[66,8,79,6],[66,12,79,10,"str1"],[66,16,79,14],[66,17,79,15,"i"],[66,18,79,16],[66,21,79,19],[66,22,79,20],[66,23,79,21],[66,28,79,26,"str2"],[66,32,79,30],[66,33,79,31,"j"],[66,34,79,32],[66,37,79,35],[66,38,79,36],[66,39,79,37],[66,41,79,39],[67,10,80,8,"dp"],[67,12,80,10],[67,13,80,11,"i"],[67,14,80,12],[67,15,80,13],[67,16,80,14,"j"],[67,17,80,15],[67,18,80,16],[67,21,80,19,"dp"],[67,23,80,21],[67,24,80,22,"i"],[67,25,80,23],[67,28,80,26],[67,29,80,27],[67,30,80,28],[67,31,80,29,"j"],[67,32,80,30],[67,35,80,33],[67,36,80,34],[67,37,80,35],[68,8,81,6],[68,9,81,7],[68,15,81,13],[69,10,82,8,"dp"],[69,12,82,10],[69,13,82,11,"i"],[69,14,82,12],[69,15,82,13],[69,16,82,14,"j"],[69,17,82,15],[69,18,82,16],[69,21,82,19,"Math"],[69,25,82,23],[69,26,82,24,"min"],[69,29,82,27],[69,30,83,10,"dp"],[69,32,83,12],[69,33,83,13,"i"],[69,34,83,14],[69,37,83,17],[69,38,83,18],[69,39,83,19],[69,40,83,20,"j"],[69,41,83,21],[69,44,83,24],[69,45,83,25],[69,46,83,26],[69,49,83,29],[69,50,83,30],[70,10,83,32],[71,10,84,10,"dp"],[71,12,84,12],[71,13,84,13,"i"],[71,14,84,14],[71,17,84,17],[71,18,84,18],[71,19,84,19],[71,20,84,20,"j"],[71,21,84,21],[71,22,84,22],[71,25,84,25],[71,26,84,26],[72,10,84,32],[73,10,85,10,"dp"],[73,12,85,12],[73,13,85,13,"i"],[73,14,85,14],[73,15,85,15],[73,16,85,16,"j"],[73,17,85,17],[73,20,85,20],[73,21,85,21],[73,22,85,22],[73,25,85,25],[73,26,85,26],[73,27,85,32],[74,10,86,8],[74,11,86,9],[75,8,87,6],[76,6,88,4],[77,4,89,2],[78,4,91,2],[78,11,91,9,"dp"],[78,13,91,11],[78,14,91,12,"m"],[78,15,91,13],[78,16,91,14],[78,17,91,15,"n"],[78,18,91,16],[78,19,91,17],[79,2,92,0],[81,2,94,0],[82,0,95,0],[83,0,96,0],[84,0,97,0],[85,2,98,7],[85,11,98,16,"checkVerbalAnswer"],[85,28,98,33,"checkVerbalAnswer"],[85,29,99,2,"question"],[85,37,99,26],[85,39,100,2,"spokenText"],[85,49,100,20],[85,51,106,2],[86,4,107,2],[87,4,108,2],[87,10,108,8,"normalizeText"],[87,23,108,21],[87,26,108,25,"text"],[87,30,108,37],[87,34,109,4,"text"],[87,38,109,8],[87,39,109,9,"toLowerCase"],[87,50,109,20],[87,51,109,21],[87,52,109,22],[87,53,109,23,"replace"],[87,60,109,30],[87,61,109,31],[87,71,109,41],[87,73,109,43],[87,75,109,45],[87,76,109,46],[87,77,109,47,"trim"],[87,81,109,51],[87,82,109,52],[87,83,109,53],[88,4,111,2],[88,10,111,8,"normalizedCorrect"],[88,27,111,25],[88,30,111,28,"normalizeText"],[88,43,111,41],[88,44,111,42,"question"],[88,52,111,50],[88,53,111,51,"fullText"],[88,61,111,59],[88,62,111,60],[89,4,112,2],[89,10,112,8,"normalizedSpoken"],[89,26,112,24],[89,29,112,27,"normalizeText"],[89,42,112,40],[89,43,112,41,"spokenText"],[89,53,112,51],[89,54,112,52],[91,4,114,2],[92,4,115,2],[92,10,115,8,"distance"],[92,18,115,16],[92,21,115,19,"levenshteinDistance"],[92,40,115,38],[92,41,115,39,"normalizedCorrect"],[92,58,115,56],[92,60,115,58,"normalizedSpoken"],[92,76,115,74],[92,77,115,75],[93,4,116,2],[93,10,116,8,"maxLength"],[93,19,116,17],[93,22,116,20,"Math"],[93,26,116,24],[93,27,116,25,"max"],[93,30,116,28],[93,31,116,29,"normalizedCorrect"],[93,48,116,46],[93,49,116,47,"length"],[93,55,116,53],[93,57,116,55,"normalizedSpoken"],[93,73,116,71],[93,74,116,72,"length"],[93,80,116,78],[93,81,116,79],[95,4,118,2],[96,4,119,2],[96,10,119,8,"accuracy"],[96,18,119,16],[96,21,119,19,"maxLength"],[96,30,119,28],[96,33,119,31],[96,34,119,32],[96,37,120,6,"Math"],[96,41,120,10],[96,42,120,11,"max"],[96,45,120,14],[96,46,120,15],[96,47,120,16],[96,49,120,18],[96,52,120,21],[96,55,120,25,"distance"],[96,63,120,33],[96,66,120,36,"maxLength"],[96,75,120,45],[96,78,120,49],[96,81,120,52],[96,82,120,53],[96,85,121,6],[96,88,121,9],[98,4,123,2],[99,4,124,2],[99,10,124,8,"isCorrect"],[99,19,124,17],[99,22,124,20,"accuracy"],[99,30,124,28],[99,34,124,32],[99,36,124,34],[100,4,126,2],[100,11,126,9],[101,6,127,4,"isCorrect"],[101,15,127,13],[102,6,128,4,"accuracy"],[102,14,128,12],[102,16,128,14,"Math"],[102,20,128,18],[102,21,128,19,"round"],[102,26,128,24],[102,27,128,25,"accuracy"],[102,35,128,33],[102,38,128,36],[102,40,128,38],[102,41,128,39],[102,44,128,42],[102,46,128,44],[103,6,128,46],[104,6,129,4,"correctAnswer"],[104,19,129,17],[104,21,129,19,"question"],[104,29,129,27],[104,30,129,28,"fullText"],[104,38,129,36],[105,6,130,4,"userAnswer"],[105,16,130,14],[105,18,130,16,"spokenText"],[106,4,131,2],[106,5,131,3],[107,2,132,0],[108,0,132,1],[108,3]],"functionMap":{"names":["<global>","processVerbalQuestion","words.map$argument_0","levenshteinDistance","Array.fill.map$argument_0","checkVerbalAnswer","normalizeText"],"mappings":"AAA;OCmB;iCC+B;6CDC;CDW;AGM;qDCG,0BD;CHoB;OKM;wBCU;qDDC;CLuB"},"hasCjsExports":false},"type":"js/module"}]}